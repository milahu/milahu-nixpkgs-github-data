[
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/6#issuecomment-1693523116",
    "issue": "https://github.com/milahu/nixpkgs/issues/6",
    "user": "https://github.com/milahu",
    "body": "## incremental builds\r\n\r\na fundamental problem of nix are the long build times\r\n\r\nwhen a complex build fails, you have to rebuild from scratch, and you cannot share compilation results between builds\r\n\r\nif you have lots of money (and a cheap energy source), you \"just buy a faster computer\" and/or \"just buy more computers\"... but for low budget (and in a [future of high energy costs](http://collapseos.org/why.html)), that wont work\r\n\r\nincremental builds are more aggressive than granular caching, because granular caching can give a cache miss, when some \\*unused\\* input was changed (when using outPath as cache key). incremental builds would consider only \\*used\\* inputs to generate the cache key\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2023-08-25T15:13:23Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/16#issuecomment-1845827863",
    "issue": "https://github.com/milahu/nixpkgs/issues/16",
    "user": "https://github.com/erictapen",
    "body": "Cool, care to write a PR for https://github.com/NixOS/nixpkgs/ ?\r\nI'd review it.",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2023-12-07T17:48:26Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/16#issuecomment-1846098033",
    "issue": "https://github.com/milahu/nixpkgs/issues/16",
    "user": "https://github.com/milahu",
    "body": "sorry im banned from nixos, thats why im talking to myself here...\r\n\r\npatch is trivial\r\n\r\n```nix\r\n{\r\n  postInstall = ''\r\n    mv $out/bin/alass-cli $out/bin/alass\r\n  '';\r\n}\r\n```\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2023-12-07T20:54:16Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/17#issuecomment-1848727056",
    "issue": "https://github.com/milahu/nixpkgs/issues/17",
    "user": "https://github.com/lf-",
    "body": "Oh excellent work. I can try to upstream it piece by piece, first, just enough to package my project clipper. ",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2023-12-09T22:04:39Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/25#issuecomment-1926960838",
    "issue": "https://github.com/milahu/nixpkgs/issues/25",
    "user": "https://github.com/pschmitt",
    "body": "please stop pinging me.",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-02-05T13:07:21Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/25#issuecomment-1927079539",
    "issue": "https://github.com/milahu/nixpkgs/issues/25",
    "user": "https://github.com/milahu",
    "body": "no. just block me. byee : )\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-02-05T14:02:20Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/31#issuecomment-1959870157",
    "issue": "https://github.com/milahu/nixpkgs/issues/31",
    "user": "https://github.com/milahu",
    "body": "> ideally `nixos-rebuild switch` should show a warning\r\n\r\nthis already shows a warning for `services.tor.settings.BridgeRelay`\r\n\r\nfix:\r\n\r\n```diff\r\n--- a/nixos/modules/services/security/tor.nix\r\n+++ b/nixos/modules/services/security/tor.nix\r\n@@ -798,7 +814,11 @@\r\n   config = mkIf cfg.enable {\r\n     # Not sure if `cfg.relay.role == \"private-bridge\"` helps as tor\r\n     # sends a lot of stats\r\n-    warnings = optional (cfg.settings.BridgeRelay &&\r\n+    warnings = optional (\r\n+      (\r\n+        cfg.settings.BridgeRelay ||\r\n+        cfg.relay.enable\r\n+      ) &&\r\n       flatten (mapAttrsToList (n: o: o.map) cfg.relay.onionServices) != [])\r\n       ''\r\n         Running Tor hidden services on a public relay makes the\r\n```\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-02-22T16:57:54Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/31#issuecomment-1961712069",
    "issue": "https://github.com/milahu/nixpkgs/issues/31",
    "user": "https://github.com/milahu",
    "body": "> this already shows a warning for `services.tor.settings.BridgeRelay`\r\n\r\nthat warning is\r\n\r\n<blockquote>\r\n\r\nRunning Tor hidden services on a public relay makes the presence of hidden services visible through simple statistical analysis of publicly available data. See https://trac.torproject.org/projects/tor/ticket/8742\r\n\r\nYou can safely ignore this warning if you don't intend to actually hide your hidden services. In either case, you can always create a container/VM with a separate Tor daemon instance.\r\n\r\n</blockquote>\r\n\r\n... but \"you can always create a container\" is harder than expected\r\nwith most config snippets, either the container fails to start, or the container has no internet access\r\n\r\nthe nixos manual is helpful\r\n[Container Management - nixos manual - single page](https://nixos.org/manual/nixos/stable/#sec-container-networking)\r\n[Container Management - nixos manual - split page](https://nlewo.github.io/nixos-manual-sphinx/administration/containers.xml.html)\r\n\r\nfor faster container rebuilds see also\r\nhttps://github.com/erikarvstedt/extra-container\r\n\r\n### nixos container with private network and internet access\r\n\r\nexample config for my server [milahuuuc365.onion](http://milahuuuc3656fettsi3jjepqhhvnuml5hug3k7djtzlfe4dw6trivqd.onion)\r\n\r\n<details>\r\n<summary>\r\n/etc/nixos/configuration.nix\r\n</summary>\r\n\r\n/etc/nixos/configuration.nix\r\n\r\n```nix\r\n{ config, pkgs, lib, modulesPath, inputs, ... }:\r\n\r\n{\r\n\r\n  networking.hostName = \"hostmachine\";\r\n\r\n  networking.useDHCP = false;\r\n\r\n  networking.networkmanager.enable = true;\r\n\r\n  networking.networkmanager.unmanaged = [\r\n    # disable NetworkManager on container interfaces\r\n    \"interface-name:ve-*\"\r\n  ];\r\n\r\n  # give internet access to containers with privateNetwork = true\r\n  networking.nat = {\r\n    enable = true;\r\n    internalInterfaces = [\r\n      # actual device name is ve-somecontXXXX with random suffix \"XXXX\"\r\n      # for container \"somecontainer\"\r\n      # see also: ip a\r\n      #\"ve-somecont+\"\r\n      \"ve-milahuuuc365\" # here no random suffix is added\r\n      #\"ve-somecont*\" # no. the \"*\" glob star is wrong here\r\n    ];\r\n    externalInterface = \"enp0s25\"; # aka \"eth0\" of the host machine\r\n  };\r\n\r\n  # https://nixos.org/manual/nixos/stable/#ch-containers\r\n\r\n  containers.\"milahuuuc365\" = {\r\n\r\n    autoStart = true;\r\n\r\n    # https://nixos.wiki/wiki/NixOS_Containers\r\n    # when privateNetwork is set to true,\r\n    # the container gains its private virtual eth0 and ve-<container_name> on the host.\r\n    # This isolation is beneficial when you want the container to have its dedicated networking stack\r\n    privateNetwork = true;\r\n\r\n    hostAddress = \"10.10.100.10\";\r\n    #hostAddress6 = \"fc00::1\";\r\n\r\n    localAddress = \"10.10.100.20\";\r\n    #localAddress6 = \"fc00::2\";\r\n\r\n    config = { config, pkgs, ... }:\r\n    let\r\n      patchedPackages = rec {\r\n        curl = (pkgs.curl.overrideAttrs (oldAttrs: {\r\n          patches = (oldAttrs.patches or []) ++ [\r\n            # add support for CURL_ALLOW_DOT_ONION=1\r\n            # fix: I want to resolve onion addresses\r\n            # https://github.com/curl/curl/discussions/11125\r\n            # https://github.com/curl/curl/pull/11236\r\n            (pkgs.fetchurl {\r\n              url = \"https://github.com/curl/curl/pull/11236.patch\";\r\n              sha256 = \"sha256-7UMLiUJEZglACu5oF4A5CTKbFyJptmpulYGJmIgP/Wc=\";\r\n            })\r\n          ];\r\n        }));\r\n        git = (pkgs.git.override {\r\n          inherit curl;\r\n        });\r\n        # patchedPackages.gitea\r\n        gitea = (pkgs.gitea.overrideAttrs (oldAttrs: rec {\r\n          # gitea> buildPhase completed in 25 minutes 17 seconds\r\n          # gitea> checkPhase completed in 17 minutes 26 seconds\r\n          doCheck = false; # waste of time\r\n          # FIXME build from source\r\n          /*\r\n          version = \"1.21.6\"; # 2024-02-22\r\n          src = pkgs.fetchFromGitHub {\r\n            # https://github.com/go-gitea/gitea\r\n            owner = \"go-gitea\";\r\n            repo = \"gitea\";\r\n            rev = \"v${version}\";\r\n            hash = \"sha256-eWObhCeIqbhKMX4BSVJXWeY8obCSyXKk3m1UXv+9bxE=\";\r\n          };\r\n          */\r\n          # https://github.com/go-gitea/gitea/pull/28909\r\n          # Respect branch info for relative links\r\n          version = \"1.21.6\"; # 2024-02-22\r\n          # FIXME build from source\r\n          # not fetching directly from the git repo, because that lacks several vendor files for the web UI\r\n          #src = fetchurl {\r\n          src = pkgs.fetchurl {\r\n            url = \"https://dl.gitea.com/gitea/${version}/gitea-src-${version}.tar.gz\";\r\n            hash = \"sha256-tixWipiVHugacTzBurdgfiLnKyVDDcqCPlysj2DoWjg=\";\r\n          };\r\n          # also patch version\r\n          # https://github.com/milahu/nixpkgs/issues/34\r\n          # stdenv.mkDerivation: overrideAttrs fails to override derived attributes\r\n          ldflags = [\r\n            \"-s\"\r\n            \"-w\"\r\n            \"-X main.Version=${version}\"\r\n            \"-X 'main.Tags=${lib.concatStringsSep \" \" oldAttrs.tags}'\"\r\n          ];\r\n          patches = (oldAttrs.patches or []) ++ [\r\n            # https://github.com/go-gitea/gitea/pull/29427\r\n            # Use relative links\r\n            (pkgs.fetchurl {\r\n              url = \"https://github.com/go-gitea/gitea/pull/29427/commits/db9e75817c5fce7da21dad61f05e41d5119834ba.patch\";\r\n              hash = \"sha256-bZULwXcfaqzTKvbIwftOdyLvdhYzX4ZqkjfMdYeXrhY=\";\r\n            })\r\n          ];\r\n        })).override {\r\n          inherit git;\r\n        };\r\n\r\n      }; # end of patchedPackages\r\n\r\n    in\r\n    rec {\r\n\r\n      networking.enableIPv6 = false;\r\n\r\n      system.stateVersion = \"23.11\";\r\n\r\n      # override nixos modules\r\n      # https://stackoverflow.com/a/46407944/10440128\r\n      disabledModules = [\r\n        # override nixos module services/security/tor.nix\r\n        \"services/security/tor.nix\"\r\n      ];\r\n\r\n      imports = [\r\n        # override nixos module services/security/tor.nix\r\n        ./modules/services/security/tor.nix\r\n      ];\r\n\r\n      environment.variables = {\r\n        # fix: curl: Not resolving .onion address (RFC 7686)\r\n        CURL_ALLOW_DOT_ONION = \"1\";\r\n      };\r\n\r\n      environment.systemPackages =\r\n      (with patchedPackages; [\r\n        curl\r\n        git\r\n        #gitea\r\n        #cgit-pink\r\n      ])\r\n      ++\r\n      (with pkgs; [\r\n        #virt-manager\r\n        iptables # debug: iptables -L -v -t nat\r\n        #git\r\n        #curl\r\n        wget # TODO resolve onion\r\n        nano\r\n        jq\r\n        dig # dns client. dig +trace example.com\r\n\r\n        # python for CGI scripts in\r\n        # /var/lib/containers/milahuuuc365/var/lib/lighttpd/www/bin/\r\n        (python3.withPackages (p: with p; [\r\n            platformdirs\r\n            charset-normalizer\r\n            captcha\r\n            psycopg2 # postgresql\r\n            multipart # post data parser\r\n        ]))\r\n      ]);\r\n\r\n      # TODO? https://sqlite.org/althttpd/doc/trunk/althttpd.md\r\n\r\n      # nixpkgs has only lighttpd version 1\r\n      # https://git.lighttpd.net/lighttpd/lighttpd1.4/src/branch/master/doc/config/lighttpd.conf\r\n      # lighttpd version 2 is unstable\r\n      # https://redmine.lighttpd.net/projects/lighttpd2/wiki\r\n      services.lighttpd =\r\n      let\r\n        #basedir = \"/var/lib/lighttpd\";\r\n        lighttpd_home_dir = \"/var/lib/lighttpd\";\r\n      in\r\n      { \r\n        enable = true;\r\n        # Document-root of the web server. Must be readable by the \"lighttpd\" user.\r\n        # TODO continuous integration. rsync? git clone?\r\n        document-root = lighttpd_home_dir + \"/www\";\r\n        port = 8200;\r\n        #enableUpstreamMimeTypes = false;\r\n        enableModules = [\r\n          #\"mod_deflate\"\r\n          \"mod_status\"\r\n          \"mod_cgi\"\r\n          \"mod_access\"\r\n          \"mod_accesslog\"\r\n          \"mod_proxy\"\r\n          #\"mod_limit\"\r\n          # TODO rate limiting\r\n        ];\r\n        # some modules are always enabled: mod_indexfile mod_dirlisting mod_staticfile\r\n        # https://git.lighttpd.net/lighttpd/lighttpd1.4/src/branch/master/doc/outdated/dirlisting.txt\r\n        extraConfig = ''\r\n\r\n          var.home_dir    = \"${lighttpd_home_dir}\"\r\n          #var.log_root    = \"/var/log/lighttpd\"\r\n          #var.server_root = \"/srv/www\"\r\n          #var.state_dir   = \"/run\"\r\n          #var.conf_dir    = \"/etc/lighttpd\"\r\n          #server.document-root = server_root + \"/htdocs\"\r\n          #server.errorlog             = log_root + \"/error.log\"\r\n          #server.errorlog = home_dir + \"/error.log\"\r\n          #server.upload-dirs = ( \"/var/tmp\" )\r\n          server.upload-dirs = ( home_dir + \"/uploads\" )\r\n          # mod_status\r\n          status.status-url          = \"/server-status\"\r\n          status.config-url          = \"/server-config\"\r\n          status.statistics-url      = \"/server-statistics\"\r\n          # main resource limit is the number of file descriptors\r\n          #server.max-fds = 1024\r\n          server.max-fds = 20\r\n\r\n          # size of the listen() backlog queue\r\n          #server.listen-backlog = 1024\r\n          #server.listen-backlog = 2\r\n          server.listen-backlog = 10\r\n\r\n          # error: sockets disabled, connection limit reached\r\n          #server.max-connections = 1024\r\n          #server.max-connections = 2\r\n          server.max-connections = 10\r\n\r\n          # Uploads to your server cant be larger than this value.\r\n          #server.max-request-size = 0\r\n          server.max-request-size = 5000\r\n\r\n          # Time to read from a socket before we consider it idle.\r\n          #server.max-read-idle = 60\r\n          server.max-read-idle = 30\r\n          # Time to write to a socket before we consider it idle.\r\n          #server.max-write-idle = 360\r\n          server.max-write-idle = 180\r\n\r\n          dir-listing.activate = \"enable\"\r\n\r\n          # TODO what?\r\n          url.access-deny = ( \"~\", \".inc\" )\r\n\r\n          #static-file.exclude-extensions = ( \".php\", \".pl\", \".fcgi\" )\r\n\r\n          # https://git.lighttpd.net/lighttpd/lighttpd1.4/src/branch/master/doc/config/conf.d/cgi.conf\r\n          #alias.url += ( \"/bin\" => basedir + \"/bin\" )\r\n          cgi.execute-x-only = \"enable\"\r\n          $HTTP[\"url\"] =~ \"^/bin/\" {\r\n            cgi.assign = (\"\" => \"\")\r\n          }\r\n          # buffer responses and send them in one part with \"Content-Length: 12345\" header\r\n          #server.stream-response-body = 0\r\n          # stream responses from the backend CGI with \"Transfer-Encoding: chunked\" header\r\n          server.stream-response-body = 1\r\n          # perform minimal buffering and potentially block the backend producer\r\n          # if the client or network is slower than the producer\r\n          #server.stream-response-body = 2\r\n\r\n          # TODO show all text files as text/plain: html, js, css\r\n          $HTTP[\"url\"] =~ \"^/src/\" {\r\n              mimetype.assign = (\r\n                  \".html\" => \"text/plain\",\r\n                  \".md\" => \"text/plain\",\r\n                  \".css\" => \"text/plain\",\r\n                  \".js\" => \"text/plain\",\r\n                  \".py\" => \"text/plain\",\r\n                  \".c\" => \"text/plain\",\r\n                  \".cc\" => \"text/plain\",\r\n                  \".cpp\" => \"text/plain\",\r\n                  \".cxx\" => \"text/plain\",\r\n                  \".php\" => \"text/plain\",\r\n              )\r\n          }\r\n\r\n          # gitea\r\n          # no. gitea only works at root\r\n          #proxy.server = (\"/src\" => ( \"\" => ( \"host\" => \"127.0.0.1\", \"port\" => 8100 )))\r\n          $HTTP[\"host\"] =~ \"^git\\.\" {\r\n            #alias.url = ( \"/system/\" => \"/var/www/system/\" )\r\n            proxy.balance = \"fair\"\r\n            proxy.server  = ( \"\" => (\"\" => ( \"host\" => \"127.0.0.1\", \"port\" => 8100)))\r\n          }\r\n        '';\r\n      };\r\n      # https://nixos.wiki/wiki/Tor\r\n      services.tor = {\r\n        # slow (but secure) socks proxy on port 9050: one circuit per destination address\r\n        enable = true;\r\n\r\n        client = {\r\n\r\n          # fast (but risky) socks proxy on port 9063 for https: new circuit every 10 minutes\r\n          enable = true;\r\n\r\n          # this will add:\r\n          # settings.TransPort = [{ addr = \"127.0.0.1\"; port = 9040; }]\r\n          transparentProxy.enable = true;\r\n\r\n          # TODO restore\r\n          # TODO test\r\n          /*\r\n          curl -s https://check.torproject.org/api/ip\r\n          */\r\n          transparentProxy.routeAllTraffic = true;\r\n\r\n\r\n          # patchedpackages.curl is wrong?\r\n          # no. blame .curlrc\r\n\r\n          #transparentProxy.externalInterface = \"ve-milahuuuc365\"; # TODO? via \"ve-*\"\r\n          transparentProxy.externalInterface = \"eth0\"; # or eth0@if4\r\n          #transparentProxy.externalInterface = \"eth0@if4\";\r\n\r\n          # this will add:\r\n          # settings.DNSPort = [{ addr = \"127.0.0.1\"; port = 9053; }];\r\n          # settings.AutomapHostsOnResolve = true;\r\n          dns.enable = true;\r\n\r\n        };\r\n        # disable by-country statistics\r\n        enableGeoIP = false;\r\n        #openFirewall = true;\r\n        settings = {\r\n          #ORPort = 9000;\r\n        };\r\n      };\r\n\r\n      # https://gitea.com/curben/blog/src/branch/master/source/_posts/tor-hidden-onion-nixos.md\r\n      services.tor.relay.onionServices = {\r\n        # gitea server\r\n        # keys are stored in /var/lib/tor/onion/milahuuuc365\r\n        # milahuuuc3656fettsi3jjepqhhvnuml5hug3k7djtzlfe4dw6trivqd.onion\r\n        \"milahuuuc365\" = {\r\n          map = [\r\n            /*\r\n            { port = 80; target = { port = 8100; }; }\r\n            { port = 2; target = { port = 8200; }; }\r\n            */\r\n            { port = 80; target = { port = 8200; }; } # lighttpd\r\n          ];\r\n\r\n          # FIXME implement this\r\n          # no. run tor + gitea in a container\r\n          #useSeparateTorProcess = true;\r\n\r\n          # ... or default\r\n          # useSeparateTorProcess = null;\r\n          # and disable the warning with\r\n          #useSeparateTorProcess = false;\r\n\r\n          #version = 3;\r\n          settings = {\r\n            #TODO default in tor-insecure\r\n            # FIXME this requires tor.client = false\r\n            # https://github.com/NixOS/nixpkgs/pull/48625\r\n            #HiddenServiceSingleHopMode = true; # NON ANONYMOUS. use tor only for NAT punching\r\n            #HiddenServiceNonAnonymousMode = true; # TODO verify. use extraConfig?\r\n            #SocksPort = 0;\r\n            #HiddenServicePort = 80; # ?\r\n          };\r\n        };\r\n        # no. use second port on milahuuuc365\r\n        /*\r\n        # static html server\r\n        # keys are stored in /var/lib/tor/onion/milapage5kmd\r\n        # TODO move to milahuweb...?\r\n        \"milapage5kmd\" = {\r\n          map = [\r\n            { port = 80; target = { port = 8200; }; }\r\n          ];\r\n        };\r\n        */\r\n      };\r\n\r\n      # https://ayats.org/blog/gitea-drone/\r\n      # https://mcwhirter.com.au/craige/blog/2019/Deploying_Gitea_on_NixOS/\r\n      services.postgresql = {\r\n        # fix: error: postgresql_11 was removed, please upgrade your postgresql version.\r\n        package = pkgs.postgresql_16;\r\n        enable = true;\r\n\r\n        ensureDatabases = [\r\n          #config.services.gitea.user\r\n          #config.services.lighttpd.user\r\n          \"lighttpd\"\r\n        ];\r\n        ensureUsers = [\r\n          {\r\n            name = \"lighttpd\";\r\n            ensureDBOwnership = true;\r\n          }\r\n        ];\r\n\r\n        # By default, peer based authentication will be used for users connecting via the Unix socket\r\n        # ???\r\n        # error? Job for container@milahuuuc365.service failed because a timeout was exceeded.\r\n        #authentication = pkgs.lib.mkOverride 10 ''\r\n        authentication = ''\r\n          #type database  DBuser    auth-method\r\n          #local all       all       trust\r\n          local lighttpd  lighttpd  trust\r\n        '';\r\n\r\n      };\r\n\r\n      # no. cgit is too ugly (but its fast)\r\n      # see also https://github.com/milahu/cgit\r\n      # FIXME \"git clone\" from cgit is slow\r\n      /*\r\n      #services.cgit-pink = {};\r\n      services.cgit.\"milahuuuc365\" = {\r\n        enable = true;\r\n        nginx.virtualHost = \"milahuuuc365\";\r\n        # TODO port? default: port 80\r\n        repos = {\r\n          # FIXME mkdir\r\n          # cgit-repos> ln: failed to create symbolic link '/nix/store/amqas9q3srnm4i7mawbi2f4rxmxccjzk-cgit-repos/milahu/alchi': No such file or directory\r\n          #\"milahu/alchi\" = {\r\n          \"milahu_alchi\" = {\r\n            desc = \"\";\r\n            # note: bare git repo\r\n            # git clone --bare --branch master --single-branch file:///home/user/src/milahu/alchi\r\n            path = \"/var/lib/cgit/repos/milahu/alchi.git\";\r\n            #path = \"milahu/alchi\";\r\n          };\r\n        };\r\n        package = pkgs.cgit-pink;\r\n        #nginx.location = \"\";\r\n        #settings\r\n        #scanPath\r\n      };\r\n      */\r\n\r\n      # too slow?\r\n      # gitea disable syntax highlighting\r\n      # http://10.10.100.20:8100/milahu/alchi/src/commit/bf17cfe9c9d94eaadae048818d5965b1eb15bd65/src/whoaremyfriends/wersindmeinefreunde.html#L2773\r\n      # Page: 52132ms = 52 seconds!\r\n      # Template: 12239ms\r\n      services.gitea = rec {\r\n        # FIXME why does it still say 1.21.4 not 1.21.6\r\n        package = patchedPackages.gitea;\r\n        enable = true;\r\n        appName = \"milahuuuc365\";\r\n        # after moving gitea service to container\r\n        # machinectl shell root@milahuuuc365\r\n        # systemctl stop gitea\r\n        # chown -R gitea:gitea /var/lib/gitea\r\n        # systemctl start gitea\r\n        stateDir = \"/var/lib/gitea\";\r\n        #customDir = \"${stateDir}/custom\";\r\n        #repositoryRoot = \"${stateDir}/repositories\";\r\n        database = {\r\n          type = \"postgres\";\r\n          # head -c1024 /dev/random | base64 -w0 | head -c100 >/run/keys/gitea-dbpass\r\n          # no. Permission denied: '/run/keys/gitea-dbpass'\r\n          # TODO move to container root\r\n          # /var/lib/containers/milahuuuc365/\r\n          #passwordFile = \"/run/keys/gitea-dbpass\";\r\n          # sudo mv /var/lib/gitea /var/lib/containers/milahuuuc365/var/lib/gitea\r\n          passwordFile = \"${stateDir}/gitea-dbpass\";\r\n        };\r\n\r\n        settings = {\r\n\r\n          \"highlight.mapping\" = {\r\n            # map file_extension to language. example: .toml = ini\r\n            # FIXME disable syntax highlighting\r\n            # see also https://github.com/go-gitea/gitea/issues/2011\r\n            \"*\" = \"nohighlight\"; # no effect\r\n            \".*\" = \"nohighlight\"; # no effect\r\n            \".html\" = \"nohighlight\"; # no effect\r\n          };\r\n\r\n          # git-lfs\r\n          #lfs.enable = false;\r\n          #lfs.contentDir = \"${stateDir}/data/lfs\";\r\n\r\n          server = {\r\n\r\n            # Disable use of CDN for static files and Gravatar for profile pictures.\r\n            OFFLINE_MODE = true;\r\n            # public URL\r\n            # TODO verify: this should be inferred from the currentl url\r\n            # FIXME this should be empty\r\n            # https://github.com/go-gitea/gitea/issues/29404\r\n            # markdown: wrong hostname in commit url with empty ROOT_URL\r\n            #ROOT_URL = \"http://milahuuuc3656fettsi3jjepqhhvnuml5hug3k7djtzlfe4dw6trivqd.onion/\";\r\n            #ROOT_URL = \"http://milahuuuc3656fettsi3jjepqhhvnuml5hug3k7djtzlfe4dw6trivqd.onion/src/\";\r\n            # no... gitea only works on root, at least with lighttpd\r\n            # maybe nginx or apache work better\r\n            #ROOT_URL = \"/src/\";\r\n            ROOT_URL = \"\";\r\n\r\n            # Listen port\r\n            HTTP_PORT = 8100;\r\n\r\n            # Listen address\r\n            # default: listen on all interfaces\r\n            # -> http://10.10.100.20:8100/\r\n            #HTTP_ADDR = \"127.0.0.1\";\r\n\r\n            # used for links in markdown\r\n            #DOMAIN = \"localhost\";\r\n            #DOMAIN = \"milahuuuc3656fettsi3jjepqhhvnuml5hug3k7djtzlfe4dw6trivqd.onion\";\r\n            # default is \"localhost\"\r\n            # TODO: grep ^DOMAIN /var/lib/gitea/custom/conf/app.ini\r\n            DOMAIN = \"\";\r\n\r\n            LANDING_PAGE = \"explore\"; # home, explore, organizations, login, custom\r\n\r\n            # Enable Git LFS support.\r\n            #LFS_START_SERVER = true;\r\n\r\n            # Upper level of template and static files path\r\n            # /nix/store/5haj5rq4cy10rvsv7dv5bn8prmfzhday-gitea-1.21.4-data\r\n            #STATIC_ROOT_PATH = \"${package}.data\";\r\n            #STATIC_ROOT_PATH = \"${stateDir}/static\";\r\n            #STATIC_ROOT_PATH = \"${stateDir}/gitea_custom/gitea\";\r\n            STATIC_ROOT_PATH = \"${stateDir}/gitea-1.21.6-data-fork\";\r\n\r\n            DISABLE_SSH = true;\r\n\r\n          };\r\n\r\n          mailer = {\r\n            ENABLED = false;\r\n          };\r\n\r\n          admin = {\r\n            # Disallow regular (non-admin) users from creating organizations.\r\n            DISABLE_REGULAR_ORG_CREATION = true;\r\n            # User cannot delete their own account\r\n            USER_DISABLED_FEATURES = \"deletion\";\r\n          };\r\n\r\n          # Cron - Garbage collect all repositories\r\n          \"cron.git_gc_repos\" = {\r\n            ENABLED = true;\r\n            #RUN_AT_START = true;\r\n            #SCHEDULE = \"@every 72h\"; # every 3 days\r\n            SCHEDULE = \"@every 240h\"; # every 10 days\r\n            # FIXME Error: gocron: cron expression failed to be parsed: failed to parse duration @every 3d: time: unknown unit \"d\" in duration \"3d\"\r\n            #SCHEDULE = \"@every 3d\"; # every 3 days\r\n          };\r\n\r\n          service = {\r\n            # https://docs.gitea.com/next/administration/config-cheat-sheet#service-service\r\n            # ask for mail confirmation of registration\r\n            REGISTER_EMAIL_CONFIRM = false;\r\n            # manually confirm new registrations\r\n            REGISTER_MANUAL_CONFIRM = true;\r\n            #DISABLE_REGISTRATION = false;\r\n            DISABLE_REGISTRATION = true;\r\n            # use captcha validation for registration\r\n            ENABLE_CAPTCHA = true;\r\n            # require captcha validation for login\r\n            REQUIRE_CAPTCHA_FOR_LOGIN = true;\r\n            CAPTCHA_TYPE = \"image\"; # image, recaptcha, hcaptcha, mcaptcha, cfturnstile\r\n            # Give new users restricted permissions by default\r\n            DEFAULT_USER_IS_RESTRICTED = true;\r\n            # Allow new users to create organizations by default\r\n            DEFAULT_ALLOW_CREATE_ORGANIZATION = false;\r\n            # use local avatars only\r\n            # http://localhost:8100/admin/config\r\n            # Picture and Avatar Configuration -> Disable Gravatar\r\n          };\r\n          ui = {\r\n            #DEFAULT_THEME = \"gitea-auto\"; # gitea-auto, gitea-light, gitea-dark\r\n            # default: 20 per page\r\n            # Number of repositories that are shown in one explore page.\r\n            EXPLORE_PAGING_NUM = 100;\r\n            # Number of issues that are shown in one page\r\n            ISSUE_PAGING_NUM = 100;\r\n            # Number of members that are shown in organization members.\r\n            MEMBERS_PAGING_NUM = 100;\r\n            # Number of items that are displayed in home feed.\r\n            #FEED_PAGING_NUM = 100;\r\n            # TODO remove \"ambiguous unicode characters\" from sources\r\n            # Detect ambiguous unicode characters in file contents and show warnings on the UI\r\n            #AMBIGUOUS_UNICODE_DETECTION = false;\r\n          };\r\n          other = {\r\n            #SHOW_FOOTER_VERSION = false;\r\n            #SHOW_FOOTER_TEMPLATE_LOAD_TIME = false;\r\n          };\r\n          indexer = rec {\r\n            # https://github.com/meilisearch/meilisearch # 40K stars, Rust\r\n            # https://github.com/blevesearch/bleve # 10K stars, Go\r\n            #ISSUE_INDEXER_TYPE = \"bleve\"; # bleve, meilisearch, elasticsearch\r\n            #ISSUE_INDEXER_CONN_STR = \"http://:${meilisearchMasterKey}@127.0.0.1:7700\";\r\n            # Enable code search (uses a lot of disk space, about 6 times more than the repository size).\r\n            REPO_INDEXER_ENABLED = true;\r\n            REPO_INDEXER_EXCLUDE = \"*.jpg,*.jpeg,*.gif,*.png,*.webp,*.svg,*.mp4,*.mp3,*.opus,*.wav,*.flac,*.aac,*.m4a\";\r\n            MAX_FILE_SIZE = 5 * 1024 * 1024; # 5 MiB. default 1 MiB\r\n            #REPO_INDEXER_TYPE = \"meilisearch\" # https://github.com/go-gitea/gitea/issues/25976\r\n            #REPO_INDEXER_TYPE = \"bleve\"; # bleve, elasticsearch\r\n            STARTUP_TIMEOUT = -1; # disable timeout. default 30\r\n            #ISSUE_INDEXER_PATH = \"data/indexers/issues.bleve\"; # default\r\n            #REPO_INDEXER_PATH = \"data/indexers/repos.bleve\"; # default\r\n          };\r\n        };\r\n      }; # end of services.gitea\r\n\r\n\r\n      /*\r\n      # somewhere between cgit and gitea\r\n      # TODO disable tilde prefix \"~\" before usernames\r\n      services.sourcehut = {\r\n        enable = true;\r\n        #listenAddress = \"\";\r\n        postgresql = {\r\n          enable = true;\r\n        };\r\n        settings = {};\r\n      };\r\n      */\r\n\r\n    };\r\n  };\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>\r\n/etc/nixos/modules/services/security/tor.nix\r\n</summary>\r\n\r\n/etc/nixos/modules/services/security/tor.nix\r\n\r\n```nix\r\n{ config, lib, options, pkgs, ... }:\r\n\r\nwith builtins;\r\nwith lib;\r\n\r\nlet\r\n  cfg = config.services.tor;\r\n  opt = options.services.tor;\r\n  stateDir = \"/var/lib/tor\";\r\n  runDir = \"/run/tor\";\r\n  descriptionGeneric = option: ''\r\n    See [torrc manual](https://2019.www.torproject.org/docs/tor-manual.html.en#${option}).\r\n  '';\r\n  bindsPrivilegedPort =\r\n    any (p0:\r\n      let p1 = if p0 ? \"port\" then p0.port else p0; in\r\n      if p1 == \"auto\" then false\r\n      else let p2 = if isInt p1 then p1 else toInt p1; in\r\n        p1 != null && 0 < p2 && p2 < 1024)\r\n    (flatten [\r\n      cfg.settings.ORPort\r\n      cfg.settings.DirPort\r\n      cfg.settings.DNSPort\r\n      cfg.settings.ExtORPort\r\n      cfg.settings.HTTPTunnelPort\r\n      cfg.settings.NATDPort\r\n      cfg.settings.SOCKSPort\r\n      cfg.settings.TransPort\r\n    ]);\r\n  optionBool = optionName: mkOption {\r\n    type = with types; nullOr bool;\r\n    default = null;\r\n    description = lib.mdDoc (descriptionGeneric optionName);\r\n  };\r\n  optionInt = optionName: mkOption {\r\n    type = with types; nullOr int;\r\n    default = null;\r\n    description = lib.mdDoc (descriptionGeneric optionName);\r\n  };\r\n  optionString = optionName: mkOption {\r\n    type = with types; nullOr str;\r\n    default = null;\r\n    description = lib.mdDoc (descriptionGeneric optionName);\r\n  };\r\n  optionStrings = optionName: mkOption {\r\n    type = with types; listOf str;\r\n    default = [];\r\n    description = lib.mdDoc (descriptionGeneric optionName);\r\n  };\r\n  optionAddress = mkOption {\r\n    type = with types; nullOr str;\r\n    default = null;\r\n    example = \"0.0.0.0\";\r\n    description = lib.mdDoc ''\r\n      IPv4 or IPv6 (if between brackets) address.\r\n    '';\r\n  };\r\n  optionUnix = mkOption {\r\n    type = with types; nullOr path;\r\n    default = null;\r\n    description = lib.mdDoc ''\r\n      Unix domain socket path to use.\r\n    '';\r\n  };\r\n  optionPort = mkOption {\r\n    type = with types; nullOr (oneOf [port (enum [\"auto\"])]);\r\n    default = null;\r\n  };\r\n  optionPorts = optionName: mkOption {\r\n    type = with types; listOf port;\r\n    default = [];\r\n    description = lib.mdDoc (descriptionGeneric optionName);\r\n  };\r\n  optionIsolablePort = with types; oneOf [\r\n    port (enum [\"auto\"])\r\n    (submodule ({config, ...}: {\r\n      options = {\r\n        addr = optionAddress;\r\n        port = optionPort;\r\n        flags = optionFlags;\r\n        SessionGroup = mkOption { type = nullOr int; default = null; };\r\n      } // genAttrs isolateFlags (name: mkOption { type = types.bool; default = false; });\r\n      config = {\r\n        flags = filter (name: config.${name} == true) isolateFlags ++\r\n                optional (config.SessionGroup != null) \"SessionGroup=${toString config.SessionGroup}\";\r\n      };\r\n    }))\r\n  ];\r\n  optionIsolablePorts = optionName: mkOption {\r\n    default = [];\r\n    type = with types; either optionIsolablePort (listOf optionIsolablePort);\r\n    description = lib.mdDoc (descriptionGeneric optionName);\r\n  };\r\n  isolateFlags = [\r\n    \"IsolateClientAddr\"\r\n    \"IsolateClientProtocol\"\r\n    \"IsolateDestAddr\"\r\n    \"IsolateDestPort\"\r\n    \"IsolateSOCKSAuth\"\r\n    \"KeepAliveIsolateSOCKSAuth\"\r\n  ];\r\n  optionSOCKSPort = doConfig: let\r\n    flags = [\r\n      \"CacheDNS\" \"CacheIPv4DNS\" \"CacheIPv6DNS\" \"GroupWritable\" \"IPv6Traffic\"\r\n      \"NoDNSRequest\" \"NoIPv4Traffic\" \"NoOnionTraffic\" \"OnionTrafficOnly\"\r\n      \"PreferIPv6\" \"PreferIPv6Automap\" \"PreferSOCKSNoAuth\" \"UseDNSCache\"\r\n      \"UseIPv4Cache\" \"UseIPv6Cache\" \"WorldWritable\"\r\n    ] ++ isolateFlags;\r\n    in with types; oneOf [\r\n      port (submodule ({config, ...}: {\r\n        options = {\r\n          unix = optionUnix;\r\n          addr = optionAddress;\r\n          port = optionPort;\r\n          flags = optionFlags;\r\n          SessionGroup = mkOption { type = nullOr int; default = null; };\r\n        } // genAttrs flags (name: mkOption { type = types.bool; default = false; });\r\n        config = mkIf doConfig { # Only add flags in SOCKSPort to avoid duplicates\r\n          flags = filter (name: config.${name} == true) flags ++\r\n                  optional (config.SessionGroup != null) \"SessionGroup=${toString config.SessionGroup}\";\r\n        };\r\n      }))\r\n    ];\r\n  optionFlags = mkOption {\r\n    type = with types; listOf str;\r\n    default = [];\r\n  };\r\n  optionORPort = optionName: mkOption {\r\n    default = [];\r\n    example = 443;\r\n    type = with types; oneOf [port (enum [\"auto\"]) (listOf (oneOf [\r\n      port\r\n      (enum [\"auto\"])\r\n      (submodule ({config, ...}:\r\n        let flags = [ \"IPv4Only\" \"IPv6Only\" \"NoAdvertise\" \"NoListen\" ];\r\n        in {\r\n        options = {\r\n          addr = optionAddress;\r\n          port = optionPort;\r\n          flags = optionFlags;\r\n        } // genAttrs flags (name: mkOption { type = types.bool; default = false; });\r\n        config = {\r\n          flags = filter (name: config.${name} == true) flags;\r\n        };\r\n      }))\r\n    ]))];\r\n    description = lib.mdDoc (descriptionGeneric optionName);\r\n  };\r\n  optionBandwidth = optionName: mkOption {\r\n    type = with types; nullOr (either int str);\r\n    default = null;\r\n    description = lib.mdDoc (descriptionGeneric optionName);\r\n  };\r\n  optionPath = optionName: mkOption {\r\n    type = with types; nullOr path;\r\n    default = null;\r\n    description = lib.mdDoc (descriptionGeneric optionName);\r\n  };\r\n\r\n  mkValueString = k: v:\r\n    if v == null then \"\"\r\n    else if isBool v then\r\n      (if v then \"1\" else \"0\")\r\n    else if v ? \"unix\" && v.unix != null then\r\n      \"unix:\"+v.unix +\r\n      optionalString (v ? \"flags\") (\" \" + concatStringsSep \" \" v.flags)\r\n    else if v ? \"port\" && v.port != null then\r\n      optionalString (v ? \"addr\" && v.addr != null) \"${v.addr}:\" +\r\n      toString v.port +\r\n      optionalString (v ? \"flags\") (\" \" + concatStringsSep \" \" v.flags)\r\n    else if k == \"ServerTransportPlugin\" then\r\n      optionalString (v.transports != []) \"${concatStringsSep \",\" v.transports} exec ${v.exec}\"\r\n    else if k == \"HidServAuth\" then\r\n      v.onion + \" \" + v.auth\r\n    else generators.mkValueStringDefault {} v;\r\n  genTorrc = settings:\r\n    generators.toKeyValue {\r\n      listsAsDuplicateKeys = true;\r\n      mkKeyValue = k: generators.mkKeyValueDefault { mkValueString = mkValueString k; } \" \" k;\r\n    }\r\n    (lib.mapAttrs (k: v:\r\n      # Not necesssary, but prettier rendering\r\n      if elem k [ \"AutomapHostsSuffixes\" \"DirPolicy\" \"ExitPolicy\" \"SocksPolicy\" ]\r\n      && v != []\r\n      then concatStringsSep \",\" v\r\n      else v)\r\n    (lib.filterAttrs (k: v: !(v == null || v == \"\"))\r\n    settings));\r\n  torrc = pkgs.writeText \"torrc\" (\r\n    genTorrc cfg.settings +\r\n    concatStrings (mapAttrsToList (name: onion:\r\n      \"HiddenServiceDir ${onion.path}\\n\" +\r\n      genTorrc onion.settings) cfg.relay.onionServices)\r\n  );\r\nin\r\n{\r\n  imports = [\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"client\" \"dns\" \"automapHostsSuffixes\" ] [ \"services\" \"tor\" \"settings\" \"AutomapHostsSuffixes\" ])\r\n    (mkRemovedOptionModule [ \"services\" \"tor\" \"client\" \"dns\" \"isolationOptions\" ] \"Use services.tor.settings.DNSPort instead.\")\r\n    (mkRemovedOptionModule [ \"services\" \"tor\" \"client\" \"dns\" \"listenAddress\" ] \"Use services.tor.settings.DNSPort instead.\")\r\n    (mkRemovedOptionModule [ \"services\" \"tor\" \"client\" \"privoxy\" \"enable\" ] \"Use services.privoxy.enable and services.privoxy.enableTor instead.\")\r\n    (mkRemovedOptionModule [ \"services\" \"tor\" \"client\" \"socksIsolationOptions\" ] \"Use services.tor.settings.SOCKSPort instead.\")\r\n    (mkRemovedOptionModule [ \"services\" \"tor\" \"client\" \"socksListenAddressFaster\" ] \"Use services.tor.settings.SOCKSPort instead.\")\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"client\" \"socksPolicy\" ] [ \"services\" \"tor\" \"settings\" \"SocksPolicy\" ])\r\n    (mkRemovedOptionModule [ \"services\" \"tor\" \"client\" \"transparentProxy\" \"isolationOptions\" ] \"Use services.tor.settings.TransPort instead.\")\r\n    (mkRemovedOptionModule [ \"services\" \"tor\" \"client\" \"transparentProxy\" \"listenAddress\" ] \"Use services.tor.settings.TransPort instead.\")\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"controlPort\" ] [ \"services\" \"tor\" \"settings\" \"ControlPort\" ])\r\n    (mkRemovedOptionModule [ \"services\" \"tor\" \"extraConfig\" ] \"Please use services.tor.settings instead.\")\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"hiddenServices\" ] [ \"services\" \"tor\" \"relay\" \"onionServices\" ])\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"accountingMax\" ] [ \"services\" \"tor\" \"settings\" \"AccountingMax\" ])\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"accountingStart\" ] [ \"services\" \"tor\" \"settings\" \"AccountingStart\" ])\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"address\" ] [ \"services\" \"tor\" \"settings\" \"Address\" ])\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"bandwidthBurst\" ] [ \"services\" \"tor\" \"settings\" \"BandwidthBurst\" ])\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"bandwidthRate\" ] [ \"services\" \"tor\" \"settings\" \"BandwidthRate\" ])\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"bridgeTransports\" ] [ \"services\" \"tor\" \"settings\" \"ServerTransportPlugin\" \"transports\" ])\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"contactInfo\" ] [ \"services\" \"tor\" \"settings\" \"ContactInfo\" ])\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"exitPolicy\" ] [ \"services\" \"tor\" \"settings\" \"ExitPolicy\" ])\r\n    (mkRemovedOptionModule [ \"services\" \"tor\" \"relay\" \"isBridge\" ] \"Use services.tor.relay.role instead.\")\r\n    (mkRemovedOptionModule [ \"services\" \"tor\" \"relay\" \"isExit\" ] \"Use services.tor.relay.role instead.\")\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"nickname\" ] [ \"services\" \"tor\" \"settings\" \"Nickname\" ])\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"port\" ] [ \"services\" \"tor\" \"settings\" \"ORPort\" ])\r\n    (mkRenamedOptionModule [ \"services\" \"tor\" \"relay\" \"portSpec\" ] [ \"services\" \"tor\" \"settings\" \"ORPort\" ])\r\n  ];\r\n\r\n  options = {\r\n    services.tor = {\r\n      enable = mkEnableOption (lib.mdDoc ''Tor daemon.\r\n        By default, the daemon is run without\r\n        relay, exit, bridge or client connectivity'');\r\n\r\n      hideWarningSeparateTorProcess = mkOption {\r\n        type = types.bool;\r\n        default = false;\r\n        description = lib.mdDoc ''\r\n          Hide the warning when running relay and hidden services\r\n          in the same Tor process.\r\n        '';\r\n      };\r\n\r\n      openFirewall = mkEnableOption (lib.mdDoc \"opening of the relay port(s) in the firewall\");\r\n\r\n      package = mkPackageOption pkgs \"tor\" { };\r\n\r\n      enableGeoIP = mkEnableOption (lib.mdDoc ''use of GeoIP databases.\r\n        Disabling this will disable by-country statistics for bridges and relays\r\n        and some client and third-party software functionality'') // { default = true; };\r\n\r\n      controlSocket.enable = mkEnableOption (lib.mdDoc ''control socket,\r\n        created in `${runDir}/control`'');\r\n\r\n      client = {\r\n        enable = mkEnableOption (lib.mdDoc ''the routing of application connections.\r\n          You might want to disable this if you plan running a dedicated Tor relay'');\r\n\r\n        transparentProxy.enable = mkEnableOption (lib.mdDoc \"transparent tor proxy\");\r\n        dns.enable = mkEnableOption (lib.mdDoc \"DNS resolver\");\r\n\r\n        transparentProxy.routeAllTraffic = mkEnableOption (lib.mdDoc ''\r\n          Route all network traffic through the Tor transparent proxy\r\n        '');\r\n\r\n        transparentProxy.externalInterface = mkOption {\r\n          type = with types; nullOr str;\r\n          default = null;\r\n          # TODO require if transparentProxy.routeAllTraffic\r\n          description = lib.mdDoc ''\r\n            Tor will use this network interface\r\n            to connect to the internet\r\n          '';\r\n        };\r\n\r\n        transparentProxy.allowSubnets = mkOption {\r\n          type = with types; listOf str;\r\n          default = [\r\n            \"127.0.0.0/8\"\r\n            \"10.0.0.0/8\"\r\n            \"172.16.0.0/12\"\r\n            \"192.168.0.0/16\"\r\n          ];\r\n          description = lib.mdDoc ''\r\n            Allow access to these subnets\r\n            without routing the traffic through Tor.\r\n\r\n            LAN destinations that shouldn't be routed through Tor.\r\n          '';\r\n        };\r\n\r\n        transparentProxy.blockSubnets = mkOption {\r\n          type = with types; listOf str;\r\n          default = [\r\n            \"0.0.0.0/8\"\r\n            \"100.64.0.0/10\"\r\n            \"169.254.0.0/16\"\r\n            \"192.0.0.0/24\"\r\n            \"192.0.2.0/24\"\r\n            \"192.88.99.0/24\"\r\n            \"198.18.0.0/15\"\r\n            \"198.51.100.0/24\"\r\n            \"203.0.113.0/24\"\r\n            \"224.0.0.0/4\"\r\n            \"240.0.0.0/4\"\r\n            \"255.255.255.255/32\" # isnt that everything...?\r\n          ];\r\n          description = lib.mdDoc ''\r\n            Block all access to these subnets.\r\n            IANA reserved blocks.\r\n            These are not processed by Tor and dropped by default.\r\n          '';\r\n        };\r\n\r\n        socksListenAddress = mkOption {\r\n          type = optionSOCKSPort false;\r\n          default = {addr = \"127.0.0.1\"; port = 9050; IsolateDestAddr = true;};\r\n          example = {addr = \"192.168.0.1\"; port = 9090; IsolateDestAddr = true;};\r\n          description = lib.mdDoc ''\r\n            Bind to this address to listen for connections from\r\n            Socks-speaking applications.\r\n          '';\r\n        };\r\n\r\n        onionServices = mkOption {\r\n          description = lib.mdDoc (descriptionGeneric \"HiddenServiceDir\");\r\n          default = {};\r\n          example = {\r\n            \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\" = {\r\n              clientAuthorizations = [\"/run/keys/tor/alice.prv.x25519\"];\r\n            };\r\n          };\r\n          type = types.attrsOf (types.submodule ({name, config, ...}: {\r\n            options.clientAuthorizations = mkOption {\r\n              description = lib.mdDoc ''\r\n                Clients' authorizations for a v3 onion service,\r\n                as a list of files containing each one private key, in the format:\r\n                ```\r\n                descriptor:x25519:<base32-private-key>\r\n                ```\r\n                ${descriptionGeneric \"_client_authorization\"}\r\n              '';\r\n              type = with types; listOf path;\r\n              default = [];\r\n              example = [\"/run/keys/tor/alice.prv.x25519\"];\r\n            };\r\n          }));\r\n        };\r\n      };\r\n\r\n      relay = {\r\n        enable = mkEnableOption (lib.mdDoc \"tor relaying\") // {\r\n          description = lib.mdDoc ''\r\n            Whether to enable relaying of Tor traffic for others.\r\n\r\n            See <https://www.torproject.org/docs/tor-doc-relay>\r\n            for details.\r\n\r\n            Setting this to true requires setting\r\n            {option}`services.tor.relay.role`\r\n            and\r\n            {option}`services.tor.settings.ORPort`\r\n            options.\r\n          '';\r\n        };\r\n\r\n        role = mkOption {\r\n          type = types.enum [ \"exit\" \"relay\" \"bridge\" \"private-bridge\" ];\r\n          description = lib.mdDoc ''\r\n            Your role in Tor network. There're several options:\r\n\r\n            - `exit`:\r\n              An exit relay. This allows Tor users to access regular\r\n              Internet services through your public IP.\r\n\r\n              You can specify which services Tor users may access via\r\n              your exit relay using {option}`settings.ExitPolicy` option.\r\n\r\n            - `relay`:\r\n              Regular relay. This allows Tor users to relay onion\r\n              traffic to other Tor nodes, but not to public\r\n              Internet.\r\n\r\n              See\r\n              <https://www.torproject.org/docs/tor-doc-relay.html.en>\r\n              for more info.\r\n\r\n            - `bridge`:\r\n              Regular bridge. Works like a regular relay, but\r\n              doesn't list you in the public relay directory and\r\n              hides your Tor node behind obfs4proxy.\r\n\r\n              Using this option will make Tor advertise your bridge\r\n              to users through various mechanisms like\r\n              <https://bridges.torproject.org/>, though.\r\n\r\n              See <https://www.torproject.org/docs/bridges.html.en>\r\n              for more info.\r\n\r\n            - `private-bridge`:\r\n              Private bridge. Works like regular bridge, but does\r\n              not advertise your node in any way.\r\n\r\n              Using this role means that you won't contribute to Tor\r\n              network in any way unless you advertise your node\r\n              yourself in some way.\r\n\r\n              Use this if you want to run a private bridge, for\r\n              example because you'll give out your bridge addr\r\n              manually to your friends.\r\n\r\n              Switching to this role after measurable time in\r\n              \"bridge\" role is pretty useless as some Tor users\r\n              would have learned about your node already. In the\r\n              latter case you can still change\r\n              {option}`port` option.\r\n\r\n              See <https://www.torproject.org/docs/bridges.html.en>\r\n              for more info.\r\n\r\n            ::: {.important}\r\n            Running an exit relay may expose you to abuse\r\n            complaints. See\r\n            <https://www.torproject.org/faq.html.en#ExitPolicies>\r\n            for more info.\r\n            :::\r\n\r\n            ::: {.important}\r\n            Note that some misconfigured and/or disrespectful\r\n            towards privacy sites will block you even if your\r\n            relay is not an exit relay. That is, just being listed\r\n            in a public relay directory can have unwanted\r\n            consequences.\r\n\r\n            Which means you might not want to use\r\n            this role if you browse public Internet from the same\r\n            network as your relay, unless you want to write\r\n            e-mails to those sites (you should!).\r\n            :::\r\n\r\n            ::: {.important}\r\n            WARNING: THE FOLLOWING PARAGRAPH IS NOT LEGAL ADVICE.\r\n            Consult with your lawyer when in doubt.\r\n\r\n            The `bridge` role should be safe to use in most situations\r\n            (unless the act of forwarding traffic for others is\r\n            a punishable offence under your local laws, which\r\n            would be pretty insane as it would make ISP illegal).\r\n            :::\r\n          '';\r\n        };\r\n\r\n        onionServices = mkOption {\r\n          description = lib.mdDoc (descriptionGeneric \"HiddenServiceDir\");\r\n          default = {};\r\n          example = {\r\n            \"example.org/www\" = {\r\n              map = [ 80 ];\r\n              authorizedClients = [\r\n                \"descriptor:x25519:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\r\n              ];\r\n            };\r\n          };\r\n          type = types.attrsOf (types.submodule ({name, config, ...}: {\r\n            options.useSeparateTorProcess = mkOption {\r\n              type = types.bool;\r\n              default = false;\r\n              description = lib.mdDoc ''\r\n                Run this hidden service in a separate Tor process.\r\n              '';\r\n            };\r\n            options.path = mkOption {\r\n              type = types.path;\r\n              description = lib.mdDoc ''\r\n                Path where to store the data files of the hidden service.\r\n                If the {option}`secretKey` is null\r\n                this defaults to `${stateDir}/onion/$onion`,\r\n                otherwise to `${runDir}/onion/$onion`.\r\n              '';\r\n            };\r\n            options.secretKey = mkOption {\r\n              type = with types; nullOr path;\r\n              default = null;\r\n              example = \"/run/keys/tor/onion/expyuzz4wqqyqhjn/hs_ed25519_secret_key\";\r\n              description = lib.mdDoc ''\r\n                Secret key of the onion service.\r\n                If null, Tor reuses any preexisting secret key (in {option}`path`)\r\n                or generates a new one.\r\n                The associated public key and hostname are deterministically regenerated\r\n                from this file if they do not exist.\r\n              '';\r\n            };\r\n            options.authorizeClient = mkOption {\r\n              description = lib.mdDoc (descriptionGeneric \"HiddenServiceAuthorizeClient\");\r\n              default = null;\r\n              type = types.nullOr (types.submodule ({...}: {\r\n                options = {\r\n                  authType = mkOption {\r\n                    type = types.enum [ \"basic\" \"stealth\" ];\r\n                    description = lib.mdDoc ''\r\n                      Either `\"basic\"` for a general-purpose authorization protocol\r\n                      or `\"stealth\"` for a less scalable protocol\r\n                      that also hides service activity from unauthorized clients.\r\n                    '';\r\n                  };\r\n                  clientNames = mkOption {\r\n                    type = with types; nonEmptyListOf (strMatching \"[A-Za-z0-9+-_]+\");\r\n                    description = lib.mdDoc ''\r\n                      Only clients that are listed here are authorized to access the hidden service.\r\n                      Generated authorization data can be found in {file}`${stateDir}/onion/$name/hostname`.\r\n                      Clients need to put this authorization data in their configuration file using\r\n                      [](#opt-services.tor.settings.HidServAuth).\r\n                    '';\r\n                  };\r\n                };\r\n              }));\r\n            };\r\n            options.authorizedClients = mkOption {\r\n              description = lib.mdDoc ''\r\n                Authorized clients for a v3 onion service,\r\n                as a list of public key, in the format:\r\n                ```\r\n                descriptor:x25519:<base32-public-key>\r\n                ```\r\n                ${descriptionGeneric \"_client_authorization\"}\r\n              '';\r\n              type = with types; listOf str;\r\n              default = [];\r\n              example = [\"descriptor:x25519:XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"];\r\n            };\r\n            options.map = mkOption {\r\n              description = lib.mdDoc (descriptionGeneric \"HiddenServicePort\");\r\n              type = with types; listOf (oneOf [\r\n                port (submodule ({...}: {\r\n                  options = {\r\n                    port = optionPort;\r\n                    target = mkOption {\r\n                      default = null;\r\n                      type = nullOr (submodule ({...}: {\r\n                        options = {\r\n                          unix = optionUnix;\r\n                          addr = optionAddress;\r\n                          port = optionPort;\r\n                        };\r\n                      }));\r\n                    };\r\n                  };\r\n                }))\r\n              ]);\r\n              apply = map (v: if isInt v then {port=v; target=null;} else v);\r\n            };\r\n            options.version = mkOption {\r\n              description = lib.mdDoc (descriptionGeneric \"HiddenServiceVersion\");\r\n              type = with types; nullOr (enum [2 3]);\r\n              default = null;\r\n            };\r\n            options.settings = mkOption {\r\n              description = lib.mdDoc ''\r\n                Settings of the onion service.\r\n                ${descriptionGeneric \"_hidden_service_options\"}\r\n              '';\r\n              default = {};\r\n              type = types.submodule {\r\n                freeformType = with types;\r\n                  (attrsOf (nullOr (oneOf [str int bool (listOf str)]))) // {\r\n                    description = \"settings option\";\r\n                  };\r\n                options.HiddenServiceAllowUnknownPorts = optionBool \"HiddenServiceAllowUnknownPorts\";\r\n                options.HiddenServiceDirGroupReadable = optionBool \"HiddenServiceDirGroupReadable\";\r\n                options.HiddenServiceExportCircuitID = mkOption {\r\n                  description = lib.mdDoc (descriptionGeneric \"HiddenServiceExportCircuitID\");\r\n                  type = with types; nullOr (enum [\"haproxy\"]);\r\n                  default = null;\r\n                };\r\n                options.HiddenServiceMaxStreams = mkOption {\r\n                  description = lib.mdDoc (descriptionGeneric \"HiddenServiceMaxStreams\");\r\n                  type = with types; nullOr (ints.between 0 65535);\r\n                  default = null;\r\n                };\r\n                options.HiddenServiceMaxStreamsCloseCircuit = optionBool \"HiddenServiceMaxStreamsCloseCircuit\";\r\n                options.HiddenServiceNumIntroductionPoints = mkOption {\r\n                  description = lib.mdDoc (descriptionGeneric \"HiddenServiceNumIntroductionPoints\");\r\n                  type = with types; nullOr (ints.between 0 20);\r\n                  default = null;\r\n                };\r\n                options.HiddenServiceSingleHopMode = optionBool \"HiddenServiceSingleHopMode\";\r\n                options.RendPostPeriod = optionString \"RendPostPeriod\";\r\n              };\r\n            };\r\n            config = {\r\n              path = mkDefault ((if config.secretKey == null then stateDir else runDir) + \"/onion/${name}\");\r\n              settings.HiddenServiceVersion = config.version;\r\n              settings.HiddenServiceAuthorizeClient =\r\n                if config.authorizeClient != null then\r\n                  config.authorizeClient.authType + \" \" +\r\n                  concatStringsSep \",\" config.authorizeClient.clientNames\r\n                else null;\r\n              settings.HiddenServicePort = map (p: mkValueString \"\" p.port + \" \" + mkValueString \"\" p.target) config.map;\r\n            };\r\n          }));\r\n        };\r\n      };\r\n\r\n      settings = mkOption {\r\n        description = lib.mdDoc ''\r\n          See [torrc manual](https://2019.www.torproject.org/docs/tor-manual.html.en)\r\n          for documentation.\r\n        '';\r\n        default = {};\r\n        type = types.submodule {\r\n          freeformType = with types;\r\n            (attrsOf (nullOr (oneOf [str int bool (listOf str)]))) // {\r\n              description = \"settings option\";\r\n            };\r\n          options.Address = optionString \"Address\";\r\n          options.AssumeReachable = optionBool \"AssumeReachable\";\r\n          options.AccountingMax = optionBandwidth \"AccountingMax\";\r\n          options.AccountingStart = optionString \"AccountingStart\";\r\n          options.AuthDirHasIPv6Connectivity = optionBool \"AuthDirHasIPv6Connectivity\";\r\n          options.AuthDirListBadExits = optionBool \"AuthDirListBadExits\";\r\n          options.AuthDirPinKeys = optionBool \"AuthDirPinKeys\";\r\n          options.AuthDirSharedRandomness = optionBool \"AuthDirSharedRandomness\";\r\n          options.AuthDirTestEd25519LinkKeys = optionBool \"AuthDirTestEd25519LinkKeys\";\r\n          options.AuthoritativeDirectory = optionBool \"AuthoritativeDirectory\";\r\n          options.AutomapHostsOnResolve = optionBool \"AutomapHostsOnResolve\";\r\n          options.AutomapHostsSuffixes = optionStrings \"AutomapHostsSuffixes\" // {\r\n            default = [\".onion\" \".exit\"];\r\n            example = [\".onion\"];\r\n          };\r\n          options.BandwidthBurst = optionBandwidth \"BandwidthBurst\";\r\n          options.BandwidthRate = optionBandwidth \"BandwidthRate\";\r\n          options.BridgeAuthoritativeDir = optionBool \"BridgeAuthoritativeDir\";\r\n          options.BridgeRecordUsageByCountry = optionBool \"BridgeRecordUsageByCountry\";\r\n          options.BridgeRelay = optionBool \"BridgeRelay\" // { default = false; };\r\n          options.CacheDirectory = optionPath \"CacheDirectory\";\r\n          options.CacheDirectoryGroupReadable = optionBool \"CacheDirectoryGroupReadable\"; # default is null and like \"auto\"\r\n          options.CellStatistics = optionBool \"CellStatistics\";\r\n          options.ClientAutoIPv6ORPort = optionBool \"ClientAutoIPv6ORPort\";\r\n          options.ClientDNSRejectInternalAddresses = optionBool \"ClientDNSRejectInternalAddresses\";\r\n          options.ClientOnionAuthDir = mkOption {\r\n            description = lib.mdDoc (descriptionGeneric \"ClientOnionAuthDir\");\r\n            default = null;\r\n            type = with types; nullOr path;\r\n          };\r\n          options.ClientPreferIPv6DirPort = optionBool \"ClientPreferIPv6DirPort\"; # default is null and like \"auto\"\r\n          options.ClientPreferIPv6ORPort = optionBool \"ClientPreferIPv6ORPort\"; # default is null and like \"auto\"\r\n          options.ClientRejectInternalAddresses = optionBool \"ClientRejectInternalAddresses\";\r\n          options.ClientUseIPv4 = optionBool \"ClientUseIPv4\";\r\n          options.ClientUseIPv6 = optionBool \"ClientUseIPv6\";\r\n          options.ConnDirectionStatistics = optionBool \"ConnDirectionStatistics\";\r\n          options.ConstrainedSockets = optionBool \"ConstrainedSockets\";\r\n          options.ContactInfo = optionString \"ContactInfo\";\r\n          options.ControlPort = mkOption rec {\r\n            description = lib.mdDoc (descriptionGeneric \"ControlPort\");\r\n            default = [];\r\n            example = [{port = 9051;}];\r\n            type = with types; oneOf [port (enum [\"auto\"]) (listOf (oneOf [\r\n              port (enum [\"auto\"]) (submodule ({config, ...}: let\r\n                flags = [\"GroupWritable\" \"RelaxDirModeCheck\" \"WorldWritable\"];\r\n                in {\r\n                options = {\r\n                  unix = optionUnix;\r\n                  flags = optionFlags;\r\n                  addr = optionAddress;\r\n                  port = optionPort;\r\n                } // genAttrs flags (name: mkOption { type = types.bool; default = false; });\r\n                config = {\r\n                  flags = filter (name: config.${name} == true) flags;\r\n                };\r\n              }))\r\n            ]))];\r\n          };\r\n          options.ControlPortFileGroupReadable= optionBool \"ControlPortFileGroupReadable\";\r\n          options.ControlPortWriteToFile = optionPath \"ControlPortWriteToFile\";\r\n          options.ControlSocket = optionPath \"ControlSocket\";\r\n          options.ControlSocketsGroupWritable = optionBool \"ControlSocketsGroupWritable\";\r\n          options.CookieAuthFile = optionPath \"CookieAuthFile\";\r\n          options.CookieAuthFileGroupReadable = optionBool \"CookieAuthFileGroupReadable\";\r\n          options.CookieAuthentication = optionBool \"CookieAuthentication\";\r\n          options.DataDirectory = optionPath \"DataDirectory\" // { default = stateDir; };\r\n          options.DataDirectoryGroupReadable = optionBool \"DataDirectoryGroupReadable\";\r\n          options.DirPortFrontPage = optionPath \"DirPortFrontPage\";\r\n          options.DirAllowPrivateAddresses = optionBool \"DirAllowPrivateAddresses\";\r\n          options.DormantCanceledByStartup = optionBool \"DormantCanceledByStartup\";\r\n          options.DormantOnFirstStartup = optionBool \"DormantOnFirstStartup\";\r\n          options.DormantTimeoutDisabledByIdleStreams = optionBool \"DormantTimeoutDisabledByIdleStreams\";\r\n          options.DirCache = optionBool \"DirCache\";\r\n          options.DirPolicy = mkOption {\r\n            description = lib.mdDoc (descriptionGeneric \"DirPolicy\");\r\n            type = with types; listOf str;\r\n            default = [];\r\n            example = [\"accept *:*\"];\r\n          };\r\n          options.DirPort = optionORPort \"DirPort\";\r\n          options.DirReqStatistics = optionBool \"DirReqStatistics\";\r\n          options.DisableAllSwap = optionBool \"DisableAllSwap\";\r\n          options.DisableDebuggerAttachment = optionBool \"DisableDebuggerAttachment\";\r\n          options.DisableNetwork = optionBool \"DisableNetwork\";\r\n          options.DisableOOSCheck = optionBool \"DisableOOSCheck\";\r\n          options.DNSPort = optionIsolablePorts \"DNSPort\";\r\n          options.DoSCircuitCreationEnabled = optionBool \"DoSCircuitCreationEnabled\";\r\n          options.DoSConnectionEnabled = optionBool \"DoSConnectionEnabled\"; # default is null and like \"auto\"\r\n          options.DoSRefuseSingleHopClientRendezvous = optionBool \"DoSRefuseSingleHopClientRendezvous\";\r\n          options.DownloadExtraInfo = optionBool \"DownloadExtraInfo\";\r\n          options.EnforceDistinctSubnets = optionBool \"EnforceDistinctSubnets\";\r\n          options.EntryStatistics = optionBool \"EntryStatistics\";\r\n          options.ExitPolicy = optionStrings \"ExitPolicy\" // {\r\n            default = [\"reject *:*\"];\r\n            example = [\"accept *:*\"];\r\n          };\r\n          options.ExitPolicyRejectLocalInterfaces = optionBool \"ExitPolicyRejectLocalInterfaces\";\r\n          options.ExitPolicyRejectPrivate = optionBool \"ExitPolicyRejectPrivate\";\r\n          options.ExitPortStatistics = optionBool \"ExitPortStatistics\";\r\n          options.ExitRelay = optionBool \"ExitRelay\"; # default is null and like \"auto\"\r\n          options.ExtORPort = mkOption {\r\n            description = lib.mdDoc (descriptionGeneric \"ExtORPort\");\r\n            default = null;\r\n            type = with types; nullOr (oneOf [\r\n              port (enum [\"auto\"]) (submodule ({...}: {\r\n                options = {\r\n                  addr = optionAddress;\r\n                  port = optionPort;\r\n                };\r\n              }))\r\n            ]);\r\n            apply = p: if isInt p || isString p then { port = p; } else p;\r\n          };\r\n          options.ExtORPortCookieAuthFile = optionPath \"ExtORPortCookieAuthFile\";\r\n          options.ExtORPortCookieAuthFileGroupReadable = optionBool \"ExtORPortCookieAuthFileGroupReadable\";\r\n          options.ExtendAllowPrivateAddresses = optionBool \"ExtendAllowPrivateAddresses\";\r\n          options.ExtraInfoStatistics = optionBool \"ExtraInfoStatistics\";\r\n          options.FascistFirewall = optionBool \"FascistFirewall\";\r\n          options.FetchDirInfoEarly = optionBool \"FetchDirInfoEarly\";\r\n          options.FetchDirInfoExtraEarly = optionBool \"FetchDirInfoExtraEarly\";\r\n          options.FetchHidServDescriptors = optionBool \"FetchHidServDescriptors\";\r\n          options.FetchServerDescriptors = optionBool \"FetchServerDescriptors\";\r\n          options.FetchUselessDescriptors = optionBool \"FetchUselessDescriptors\";\r\n          options.ReachableAddresses = optionStrings \"ReachableAddresses\";\r\n          options.ReachableDirAddresses = optionStrings \"ReachableDirAddresses\";\r\n          options.ReachableORAddresses = optionStrings \"ReachableORAddresses\";\r\n          options.GeoIPFile = optionPath \"GeoIPFile\";\r\n          options.GeoIPv6File = optionPath \"GeoIPv6File\";\r\n          options.GuardfractionFile = optionPath \"GuardfractionFile\";\r\n          options.HidServAuth = mkOption {\r\n            description = lib.mdDoc (descriptionGeneric \"HidServAuth\");\r\n            default = [];\r\n            type = with types; listOf (oneOf [\r\n              (submodule {\r\n                options = {\r\n                  onion = mkOption {\r\n                    type = strMatching \"[a-z2-7]{16}\\\\.onion\";\r\n                    description = lib.mdDoc \"Onion address.\";\r\n                    example = \"xxxxxxxxxxxxxxxx.onion\";\r\n                  };\r\n                  auth = mkOption {\r\n                    type = strMatching \"[A-Za-z0-9+/]{22}\";\r\n                    description = lib.mdDoc \"Authentication cookie.\";\r\n                  };\r\n                };\r\n              })\r\n            ]);\r\n            example = [\r\n              {\r\n                onion = \"xxxxxxxxxxxxxxxx.onion\";\r\n                auth = \"xxxxxxxxxxxxxxxxxxxxxx\";\r\n              }\r\n            ];\r\n          };\r\n          options.HiddenServiceNonAnonymousMode = optionBool \"HiddenServiceNonAnonymousMode\";\r\n          options.HiddenServiceStatistics = optionBool \"HiddenServiceStatistics\";\r\n          options.HSLayer2Nodes = optionStrings \"HSLayer2Nodes\";\r\n          options.HSLayer3Nodes = optionStrings \"HSLayer3Nodes\";\r\n          options.HTTPTunnelPort = optionIsolablePorts \"HTTPTunnelPort\";\r\n          options.IPv6Exit = optionBool \"IPv6Exit\";\r\n          options.KeyDirectory = optionPath \"KeyDirectory\";\r\n          options.KeyDirectoryGroupReadable = optionBool \"KeyDirectoryGroupReadable\";\r\n          options.LogMessageDomains = optionBool \"LogMessageDomains\";\r\n          options.LongLivedPorts = optionPorts \"LongLivedPorts\";\r\n          options.MainloopStats = optionBool \"MainloopStats\";\r\n          options.MaxAdvertisedBandwidth = optionBandwidth \"MaxAdvertisedBandwidth\";\r\n          options.MaxCircuitDirtiness = optionInt \"MaxCircuitDirtiness\";\r\n          options.MaxClientCircuitsPending = optionInt \"MaxClientCircuitsPending\";\r\n          options.NATDPort = optionIsolablePorts \"NATDPort\";\r\n          options.NewCircuitPeriod = optionInt \"NewCircuitPeriod\";\r\n          options.Nickname = optionString \"Nickname\";\r\n          options.ORPort = optionORPort \"ORPort\";\r\n          options.OfflineMasterKey = optionBool \"OfflineMasterKey\";\r\n          options.OptimisticData = optionBool \"OptimisticData\"; # default is null and like \"auto\"\r\n          options.PaddingStatistics = optionBool \"PaddingStatistics\";\r\n          options.PerConnBWBurst = optionBandwidth \"PerConnBWBurst\";\r\n          options.PerConnBWRate = optionBandwidth \"PerConnBWRate\";\r\n          options.PidFile = optionPath \"PidFile\";\r\n          options.ProtocolWarnings = optionBool \"ProtocolWarnings\";\r\n          options.PublishHidServDescriptors = optionBool \"PublishHidServDescriptors\";\r\n          options.PublishServerDescriptor = mkOption {\r\n            description = lib.mdDoc (descriptionGeneric \"PublishServerDescriptor\");\r\n            type = with types; nullOr (enum [false true 0 1 \"0\" \"1\" \"v3\" \"bridge\"]);\r\n            default = null;\r\n          };\r\n          options.ReducedExitPolicy = optionBool \"ReducedExitPolicy\";\r\n          options.RefuseUnknownExits = optionBool \"RefuseUnknownExits\"; # default is null and like \"auto\"\r\n          options.RejectPlaintextPorts = optionPorts \"RejectPlaintextPorts\";\r\n          options.RelayBandwidthBurst = optionBandwidth \"RelayBandwidthBurst\";\r\n          options.RelayBandwidthRate = optionBandwidth \"RelayBandwidthRate\";\r\n          #options.RunAsDaemon\r\n          options.Sandbox = optionBool \"Sandbox\";\r\n          options.ServerDNSAllowBrokenConfig = optionBool \"ServerDNSAllowBrokenConfig\";\r\n          options.ServerDNSAllowNonRFC953Hostnames = optionBool \"ServerDNSAllowNonRFC953Hostnames\";\r\n          options.ServerDNSDetectHijacking = optionBool \"ServerDNSDetectHijacking\";\r\n          options.ServerDNSRandomizeCase = optionBool \"ServerDNSRandomizeCase\";\r\n          options.ServerDNSResolvConfFile = optionPath \"ServerDNSResolvConfFile\";\r\n          options.ServerDNSSearchDomains = optionBool \"ServerDNSSearchDomains\";\r\n          options.ServerTransportPlugin = mkOption {\r\n            description = lib.mdDoc (descriptionGeneric \"ServerTransportPlugin\");\r\n            default = null;\r\n            type = with types; nullOr (submodule ({...}: {\r\n              options = {\r\n                transports = mkOption {\r\n                  description = lib.mdDoc \"List of pluggable transports.\";\r\n                  type = listOf str;\r\n                  example = [\"obfs2\" \"obfs3\" \"obfs4\" \"scramblesuit\"];\r\n                };\r\n                exec = mkOption {\r\n                  type = types.str;\r\n                  description = lib.mdDoc \"Command of pluggable transport.\";\r\n                };\r\n              };\r\n            }));\r\n          };\r\n          options.ShutdownWaitLength = mkOption {\r\n            type = types.int;\r\n            default = 30;\r\n            description = lib.mdDoc (descriptionGeneric \"ShutdownWaitLength\");\r\n          };\r\n          options.SocksPolicy = optionStrings \"SocksPolicy\" // {\r\n            example = [\"accept *:*\"];\r\n          };\r\n          options.SOCKSPort = mkOption {\r\n            description = lib.mdDoc (descriptionGeneric \"SOCKSPort\");\r\n            default = lib.optionals cfg.settings.HiddenServiceNonAnonymousMode [{port = 0;}];\r\n            defaultText = literalExpression ''\r\n              if config.${opt.settings}.HiddenServiceNonAnonymousMode == true\r\n              then [ { port = 0; } ]\r\n              else [ ]\r\n            '';\r\n            example = [{port = 9090;}];\r\n            type = types.listOf (optionSOCKSPort true);\r\n          };\r\n          options.TestingTorNetwork = optionBool \"TestingTorNetwork\";\r\n          options.TransPort = optionIsolablePorts \"TransPort\";\r\n          options.TransProxyType = mkOption {\r\n            description = lib.mdDoc (descriptionGeneric \"TransProxyType\");\r\n            type = with types; nullOr (enum [\"default\" \"TPROXY\" \"ipfw\" \"pf-divert\"]);\r\n            default = null;\r\n          };\r\n          #options.TruncateLogFile\r\n          options.UnixSocksGroupWritable = optionBool \"UnixSocksGroupWritable\";\r\n          options.UseDefaultFallbackDirs = optionBool \"UseDefaultFallbackDirs\";\r\n          options.UseMicrodescriptors = optionBool \"UseMicrodescriptors\";\r\n          options.V3AuthUseLegacyKey = optionBool \"V3AuthUseLegacyKey\";\r\n          options.V3AuthoritativeDirectory = optionBool \"V3AuthoritativeDirectory\";\r\n          options.VersioningAuthoritativeDirectory = optionBool \"VersioningAuthoritativeDirectory\";\r\n          #options.VirtualAddrNetworkIPv4 = optionString \"VirtualAddrNetworkIPv4\";\r\n          # https://gitlab.torproject.org/tpo/core/torsocks/-/issues/14265\r\n          # By default, VirtualAddrNetworkIPv4 is 127.192.0.0/10 and VirtualAddrNetworkIPv6 is [FE80::]/10\r\n          options.VirtualAddrNetworkIPv4 = mkOption {\r\n            type = with types; nullOr str;\r\n            default = \"10.192.0.0/10\";\r\n            description = lib.mdDoc (descriptionGeneric \"VirtualAddrNetworkIPv4\");\r\n          };\r\n          #options.VirtualAddrNetworkIPv6 = optionString \"VirtualAddrNetworkIPv6\";\r\n          options.VirtualAddrNetworkIPv6 = mkOption {\r\n            type = with types; nullOr str;\r\n            default = \"[FE80::]/10\";\r\n            description = lib.mdDoc (descriptionGeneric \"VirtualAddrNetworkIPv6\");\r\n          };\r\n          options.WarnPlaintextPorts = optionPorts \"WarnPlaintextPorts\";\r\n        };\r\n      };\r\n    };\r\n  };\r\n\r\n  config = mkIf cfg.enable (\r\n  # FIXME infinite recursion via config\r\n  /*\r\n  assert assertMsg (config.networking.enableIPv6 == false) \"IPv6 is not-yet supported. expected: config.networking.enableIPv6 = false;\";\r\n  assert assertMsg (config.networking.firewall.enable == true) \"expected: config.networking.firewall.enable = true;\";\r\n  assert assertMsg (config.networking.nftables.enable == false) \"expected: config.networking.nftables.enable = false;\";\r\n  assert assertMsg false \"wtf\";\r\n  assert assertMsg true \"wtf 2\";\r\n  */\r\n  {\r\n    # Not sure if `cfg.relay.role == \"private-bridge\"` helps as tor\r\n    # sends a lot of stats\r\n    warnings = optional (\r\n      (\r\n        cfg.settings.BridgeRelay ||\r\n        cfg.relay.enable\r\n      ) &&\r\n      flatten (mapAttrsToList (n: o: o.map) cfg.relay.onionServices) != [])\r\n      ''\r\n        Running Tor hidden services on a public relay makes the\r\n        presence of hidden services visible through simple statistical\r\n        analysis of publicly available data.\r\n        See https://trac.torproject.org/projects/tor/ticket/8742\r\n\r\n        You can safely ignore this warning if you don't intend to\r\n        actually hide your hidden services. In either case, you can\r\n        always create a container/VM with a separate Tor daemon instance.\r\n      '' ++\r\n      flatten (mapAttrsToList (n: o:\r\n        optionals (o.settings.HiddenServiceVersion == 2) [\r\n          (optional (o.settings.HiddenServiceExportCircuitID != null) ''\r\n            HiddenServiceExportCircuitID is used in the HiddenService: ${n}\r\n            but this option is only for v3 hidden services.\r\n          '')\r\n        ] ++\r\n        optionals (o.settings.HiddenServiceVersion != 2) [\r\n          (optional (o.settings.HiddenServiceAuthorizeClient != null) ''\r\n            HiddenServiceAuthorizeClient is used in the HiddenService: ${n}\r\n            but this option is only for v2 hidden services.\r\n          '')\r\n          (optional (o.settings.RendPostPeriod != null) ''\r\n            RendPostPeriod is used in the HiddenService: ${n}\r\n            but this option is only for v2 hidden services.\r\n          '')\r\n        ]\r\n      ) cfg.relay.onionServices);\r\n\r\n    users.groups.tor.gid = config.ids.gids.tor;\r\n    users.users.tor =\r\n      { description = \"Tor Daemon User\";\r\n        createHome  = true;\r\n        home        = stateDir;\r\n        group       = \"tor\";\r\n        uid         = config.ids.uids.tor;\r\n      };\r\n\r\n    services.tor.settings = mkMerge [\r\n      (mkIf cfg.enableGeoIP {\r\n        GeoIPFile = \"${cfg.package.geoip}/share/tor/geoip\";\r\n        GeoIPv6File = \"${cfg.package.geoip}/share/tor/geoip6\";\r\n      })\r\n      (mkIf cfg.controlSocket.enable {\r\n        ControlPort = [ { unix = runDir + \"/control\"; GroupWritable=true; RelaxDirModeCheck=true; } ];\r\n      })\r\n      (mkIf cfg.relay.enable (\r\n        optionalAttrs (cfg.relay.role != \"exit\") {\r\n          ExitPolicy = mkForce [\"reject *:*\"];\r\n        } //\r\n        optionalAttrs (elem cfg.relay.role [\"bridge\" \"private-bridge\"]) {\r\n          BridgeRelay = true;\r\n          ExtORPort.port = mkDefault \"auto\";\r\n          ServerTransportPlugin.transports = mkDefault [\"obfs4\"];\r\n          ServerTransportPlugin.exec = mkDefault \"${lib.getExe pkgs.obfs4} managed\";\r\n        } // optionalAttrs (cfg.relay.role == \"private-bridge\") {\r\n          ExtraInfoStatistics = false;\r\n          PublishServerDescriptor = false;\r\n        }\r\n      ))\r\n      (mkIf (!cfg.relay.enable) {\r\n        # Avoid surprises when leaving ORPort/DirPort configurations in cfg.settings,\r\n        # because it would still enable Tor as a relay,\r\n        # which can trigger all sort of problems when not carefully done,\r\n        # like the blocklisting of the machine's IP addresses\r\n        # by some hosting providers...\r\n        DirPort = mkForce [];\r\n        ORPort = mkForce [];\r\n        PublishServerDescriptor = mkForce false;\r\n      })\r\n      (mkIf (!cfg.client.enable) {\r\n        # Make sure application connections via SOCKS are disabled\r\n        # when services.tor.client.enable is false\r\n        SOCKSPort = mkForce [ 0 ];\r\n      })\r\n      (mkIf cfg.client.enable (\r\n        { SOCKSPort = [ cfg.client.socksListenAddress ];\r\n        } // optionalAttrs cfg.client.transparentProxy.enable {\r\n          TransPort = [{ addr = \"127.0.0.1\"; port = 9040; }];\r\n        } // optionalAttrs cfg.client.dns.enable {\r\n          DNSPort = [{ addr = \"127.0.0.1\"; port = 9053; }];\r\n          AutomapHostsOnResolve = true;\r\n        } // optionalAttrs (flatten (mapAttrsToList (n: o: o.clientAuthorizations) cfg.client.onionServices) != []) {\r\n          ClientOnionAuthDir = runDir + \"/ClientOnionAuthDir\";\r\n        }\r\n      ))\r\n    ];\r\n\r\n    # merged. see below\r\n    /*\r\n    networking.firewall = mkIf cfg.openFirewall {\r\n      allowedTCPPorts =\r\n        concatMap (o:\r\n          if isInt o && o > 0 then [o]\r\n          else optionals (o ? \"port\" && isInt o.port && o.port > 0) [o.port]\r\n        ) (flatten [\r\n          cfg.settings.ORPort\r\n          cfg.settings.DirPort\r\n        ]);\r\n    };\r\n    */\r\n\r\n    # TODO remove\r\n    /*\r\n    # TODO add support for nftables\r\n    # similar: nixpkgs/nixos/modules/services/networking/redsocks.nix\r\n    # similar: nixpkgs/nixos/modules/services/networking/sslh.nix\r\n    # TODO cfg transparent ...\r\n    networking.firewall.extraCommands = mkIf cfg.client.transparentProxy.routeAllTraffic ''\r\n      # https://gitlab.torproject.org/legacy/trac/-/wikis/doc/TransparentProxy\r\n\r\n      ### Set variables\r\n      # The UID that Tor runs as (varies from system to system)\r\n      _tor_uid=$(id -u tor)\r\n\r\n      # Tor's TransPort\r\n      _trans_port=${cfg.settings.TransPort}\r\n\r\n      # Tor's DNSPort\r\n      _dns_port=${cfg.settings.DNSPort}\r\n\r\n      # Tor's VirtualAddrNetworkIPv4\r\n      #_virt_addr=\"10.192.0.0/10\"\r\n      _virt_addr=${cfg.settings.VirtualAddrNetworkIPv4}\r\n      # TODO IPv6\r\n\r\n      # Your outgoing interface\r\n      #_out_if=\"eth0\"\r\n      _out_if=${cfg.client.transparentProxy.externalInterface}\r\n\r\n      # LAN destinations that shouldn't be routed through Tor.\r\n      _non_tor=${builtins.concatStringsSep \" \" cfg.client.transparentProxy.allowSubnets}\r\n\r\n      # IANA reserved blocks.\r\n      _resv_iana=${builtins.concatStringsSep \" \" cfg.client.transparentProxy.blockSubnets}\r\n\r\n      ### Don't lock yourself out after the flush\r\n      #iptables -P INPUT ACCEPT\r\n      #iptables -P OUTPUT ACCEPT\r\n\r\n      ### Flush iptables\r\n      iptables -F\r\n      iptables -t nat -F\r\n\r\n      ### *nat OUTPUT (For local redirection)\r\n      # nat .onion addresses\r\n      iptables -t nat -A OUTPUT -d $_virt_addr -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $_trans_port\r\n\r\n      # nat dns requests to Tor\r\n      iptables -t nat -A OUTPUT -d 127.0.0.1/32 -p udp -m udp --dport 53 -j REDIRECT --to-ports $_dns_port\r\n\r\n      # Don't nat the Tor process, the loopback, or the local network\r\n      iptables -t nat -A OUTPUT -m owner --uid-owner $_tor_uid -j RETURN\r\n      iptables -t nat -A OUTPUT -o lo -j RETURN\r\n\r\n      # Allow lan access for hosts in $_non_tor\r\n      for _lan in $_non_tor; do\r\n        iptables -t nat -A OUTPUT -d $_lan -j RETURN\r\n      done\r\n\r\n      for _iana in $_resv_iana; do\r\n        iptables -t nat -A OUTPUT -d $_iana -j RETURN\r\n      done\r\n\r\n      # Redirect all other pre-routing and output to Tor's TransPort\r\n      iptables -t nat -A OUTPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $_trans_port\r\n\r\n      ### *filter INPUT\r\n      # Don't forget to grant yourself ssh access from remote machines before the DROP.\r\n      #iptables -A INPUT -i $_out_if -p tcp --dport 22 -m state --state NEW -j ACCEPT\r\n\r\n      iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT\r\n      iptables -A INPUT -i lo -j ACCEPT\r\n\r\n      # Allow INPUT from lan hosts in $_non_tor\r\n      # Uncomment these 3 lines to enable.\r\n      #for _lan in $_non_tor; do\r\n      # iptables -A INPUT -s $_lan -j ACCEPT\r\n      #done\r\n\r\n      # Log & Drop everything else. Uncomment to enable logging\r\n      #iptables -A INPUT -j LOG --log-prefix \"Dropped INPUT packet: \" --log-level 7 --log-uid\r\n      iptables -A INPUT -j DROP\r\n\r\n      ### *filter FORWARD\r\n      iptables -A FORWARD -j DROP\r\n\r\n      ### *filter OUTPUT\r\n      iptables -A OUTPUT -m state --state INVALID -j DROP\r\n      iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT\r\n\r\n      # Allow Tor process output\r\n      iptables -A OUTPUT -o $_out_if -m owner --uid-owner $_tor_uid -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j ACCEPT\r\n\r\n      # Allow loopback output\r\n      iptables -A OUTPUT -d 127.0.0.1/32 -o lo -j ACCEPT\r\n\r\n      # Tor transproxy magic\r\n      iptables -A OUTPUT -d 127.0.0.1/32 -p tcp -m tcp --dport $_trans_port --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT\r\n\r\n      # Allow OUTPUT to lan hosts in $_non_tor\r\n      # Uncomment these 3 lines to enable.\r\n      #for _lan in $_non_tor; do\r\n      # iptables -A OUTPUT -d $_lan -j ACCEPT\r\n      #done\r\n\r\n      # Log & Drop everything else. Uncomment to enable logging\r\n      #iptables -A OUTPUT -j LOG --log-prefix \"Dropped OUTPUT packet: \" --log-level 7 --log-uid\r\n      iptables -A OUTPUT -j DROP\r\n\r\n      ### Set default policies to DROP\r\n      iptables -P INPUT DROP\r\n      iptables -P FORWARD DROP\r\n      iptables -P OUTPUT DROP\r\n\r\n      ### Set default policies to DROP for IPv6\r\n      #ip6tables -P INPUT DROP\r\n      #ip6tables -P FORWARD DROP\r\n      #ip6tables -P OUTPUT DROP\r\n    '';\r\n    */\r\n\r\n    /*\r\n    assert assertMsg (config.networking.enableIPv6 == false) \"IPv6 is not-yet supported. expected: config.networking.enableIPv6 = false;\";\r\n    assert assertMsg config.networking.firewall.enable \"expected: config.networking.firewall.enable = true;\";\r\n    assert assertMsg (config.networking.nftables.enable == false) \"expected: config.networking.nftables.enable = false;\";\r\n    */\r\n\r\n    networking.enableIPv6 = false; # TODO force\r\n\r\n    # no. just use iptables\r\n    # nixos firewall: deprecate iptables in favor of nftables\r\n    # https://github.com/milahu/nixpkgs/issues/32\r\n    /*\r\n     error: The option `containers.milahuuuc365.networking.nftables.enable' has conflicting definition values:\r\n     - In `/nix/store/914j1h8haf0j7l21ycg419r0603pcp3s-source/modules/services/security/tor.nix': false\r\n     - In `/nix/store/qj4mpzbis3syryphw71ywc8av4hhzp6y-source/nixos/modules/virtualisation/nixos-containers.nix': true\r\n    */\r\n    #networking.nftables.enable = false;\r\n\r\n    networking.nameservers = mkIf cfg.client.transparentProxy.routeAllTraffic [\r\n      \"127.0.0.1\"\r\n    ];\r\n\r\n    # based on networking/sslh.nix\r\n    networking.firewall = (mkIf cfg.openFirewall {\r\n      #networking.firewall.enable = true;\r\n      enable = true; # TODO force\r\n      allowedTCPPorts =\r\n        concatMap (o:\r\n          if isInt o && o > 0 then [o]\r\n          else optionals (o ? \"port\" && isInt o.port && o.port > 0) [o.port]\r\n        ) (flatten [\r\n          cfg.settings.ORPort\r\n          cfg.settings.DirPort\r\n        ]);\r\n    })\r\n    //\r\n    (mkIf cfg.client.transparentProxy.routeAllTraffic (\r\n    # FIXME this shows with services.tor.enable = false\r\n    assert assertMsg (cfg.client.transparentProxy.enable == true) \"with services.tor.client.transparentProxy.routeAllTraffic == true: expected: services.tor.client.transparentProxy.enable = true;\";\r\n    assert assertMsg (cfg.client.transparentProxy.externalInterface != null) \"with services.tor.client.transparentProxy.routeAllTraffic == true: expected: services.tor.client.transparentProxy.externalInterface = \\\"...\\\";\";\r\n    assert assertMsg (cfg.client.dns.enable == true) \"with services.tor.client.transparentProxy.routeAllTraffic == true: expected: services.tor.client.dns.enable = true;\";\r\n    assert builtins.length cfg.settings.DNSPort == 1;\r\n    assert builtins.length cfg.settings.TransPort == 1;\r\n    # error: cannot coerce a list to a string\r\n    # ... can be caused by putting the wrong parts of cfg.settings into strings\r\n    #lib.traceSeqN 5 { cfg_settings = cfg.settings; } throw \"todo\" # debug\r\n    (let\r\n      iptablesCommands = [\r\n        /*\r\n        # networking/sslh.nix\r\n        # DROP martian packets as they would have been if route_localnet was zero\r\n        # Note: packets not leaving the server aren't affected by this, thus sslh will still work\r\n        { table = \"raw\";    command = \"PREROUTING  ! -i lo -d 127.0.0.0/8 -j DROP\"; }\r\n        { table = \"mangle\"; command = \"POSTROUTING ! -o lo -s 127.0.0.0/8 -j DROP\"; }\r\n        # Mark all connections made by ssl for special treatment (here sslh is run as user ${user})\r\n        { table = \"nat\";    command = \"OUTPUT -m owner --uid-owner ${user} -p tcp --tcp-flags FIN,SYN,RST,ACK SYN -j CONNMARK --set-xmark 0x02/0x0f\"; }\r\n        # Outgoing packets that should go to sslh instead have to be rerouted, so mark them accordingly (copying over the connection mark)\r\n        { table = \"mangle\"; command = \"OUTPUT ! -o lo -p tcp -m connmark --mark 0x02/0x0f -j CONNMARK --restore-mark --mask 0x0f\"; }\r\n        */\r\n\r\n        # https://gitlab.torproject.org/legacy/trac/-/wikis/doc/TransparentProxy\r\n        # https://andreafortuna.org/2019/06/19/tor-transparent-proxy-on-linux-a-simple-implementation/\r\n\r\n        ### *nat OUTPUT (For local redirection)\r\n        # nat .onion addresses\r\n\r\n        { table = \"nat\"; command = \"OUTPUT -d ${cfg.settings.VirtualAddrNetworkIPv4} -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports ${builtins.toString (builtins.elemAt cfg.settings.TransPort 0).port}\"; }\r\n\r\n        # no. this is not working. dns requests still go to the LAN gateway\r\n        # and onion domains are not resolved\r\n        # blame: -d 127.0.0.1/32\r\n        # nat dns requests to Tor\r\n        # https://gitlab.torproject.org/legacy/trac/-/wikis/doc/TransparentProxy\r\n        # iptables -t nat -A OUTPUT -d 127.0.0.1/32 -p udp -m udp --dport 53 -j REDIRECT --to-ports $_dns_port\r\n        #{ table = \"nat\"; command = \"OUTPUT -d 127.0.0.1/32 -p udp -m udp --dport 53 -j REDIRECT --to-ports ${builtins.toString (builtins.elemAt cfg.settings.DNSPort 0).port}\"; }\r\n\r\n# TODO will this resolve ALL domains over tor? or only onion domains?\r\n# Since a transparent proxy operates without application support, we have to accept ordinary DNS requests and somehow resolve them through Tor in order to avoid anonymity compromising DNS leaks. Tor versions starting with 0.2.0.1-alpha have a built-in DNSPort designed to operate as a limited DNS server.\r\n# https://gitlab.torproject.org/legacy/trac/-/wikis/doc/TransparentProxy#bsd-pf\r\n# ALL your DNS request will be made through Tor -- anonymous and non-anonymous. This can slow down accessing webpages that you are not accessing anonymously.\r\n# TODO resolv.conf: nameserver 127.0.0.1\r\n# TODO DNSPort 53\r\n\r\n        # nat dns requests to Tor\r\n        # https://andreafortuna.org/2019/06/19/tor-transparent-proxy-on-linux-a-simple-implementation/\r\n        # iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 5353\r\n        { table = \"nat\"; command = \"OUTPUT -p udp --dport 53 -j REDIRECT --to-ports ${builtins.toString (builtins.elemAt cfg.settings.DNSPort 0).port}\"; }\r\n\r\n        # FIXME wrong? we need nat for internet access\r\n        # Don't nat the Tor process, the loopback, or the local network\r\n        # https://gitlab.torproject.org/legacy/trac/-/wikis/doc/TransparentProxy\r\n        # iptables -t nat -A OUTPUT -m owner --uid-owner $_tor_uid -j RETURN\r\n        { table = \"nat\"; command = \"OUTPUT -m owner --uid-owner ${builtins.toString config.ids.uids.tor} -j RETURN\"; }\r\n        # https://andreafortuna.org/2019/06/19/tor-transparent-proxy-on-linux-a-simple-implementation/\r\n        # iptables -t nat -A OUTPUT -m owner --uid-owner 0 -j RETURN\r\n\r\n        # Don't nat the Tor process, the loopback, or the local network\r\n        # https://gitlab.torproject.org/legacy/trac/-/wikis/doc/TransparentProxy\r\n        # iptables -t nat -A OUTPUT -o lo -j RETURN\r\n        { table = \"nat\"; command = \"OUTPUT -o lo -j RETURN\"; }\r\n      ]\r\n\r\n      # TODO same rules for \"allow\" and \"block\"?\r\n      # TODO expose this option? only allow access to the LAN gateway\r\n      # Allow lan access for hosts in $_non_tor\r\n      # for _lan in $_non_tor; do\r\n      #   iptables -t nat -A OUTPUT -d $_lan -j RETURN\r\n      # done\r\n      ++ (builtins.map (_lan: { table = \"nat\"; command = \"OUTPUT -d ${_lan} -j RETURN\"; }) cfg.client.transparentProxy.allowSubnets)\r\n\r\n      # block access to IANA reserved blocks\r\n      # for _iana in $_resv_iana; do\r\n      #   iptables -t nat -A OUTPUT -d $_iana -j RETURN\r\n      # done\r\n      ++ (builtins.map (_iana: { table = \"nat\"; command = \"OUTPUT -d ${_iana} -j RETURN\"; }) cfg.client.transparentProxy.blockSubnets)\r\n\r\n      ++ [\r\n        # Redirect all other pre-routing and output to Tor's TransPort\r\n        # iptables -t nat -A OUTPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports $_trans_port\r\n        { table = \"nat\"; command = \"OUTPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports ${builtins.toString (builtins.elemAt cfg.settings.TransPort 0).port}\"; }\r\n\r\n        ### *filter INPUT\r\n        # Don't forget to grant yourself ssh access from remote machines before the DROP.\r\n        # # iptables -A INPUT -i $_out_if -p tcp --dport 22 -m state --state NEW -j ACCEPT\r\n        #{ table = \"raw\"; command = \"INPUT -i ${cfg.client.transparentProxy.externalInterface} -p tcp --dport 22 -m state --state NEW -j ACCEPT\"; }\r\n\r\n        # iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT\r\n        { table = \"raw\"; command = \"INPUT -m state --state ESTABLISHED -j ACCEPT\"; }\r\n\r\n        # iptables -A INPUT -i lo -j ACCEPT\r\n        { table = \"raw\"; command = \"INPUT -i lo -j ACCEPT\"; }\r\n      ]\r\n\r\n      # Allow INPUT from lan hosts in ${builtins.concatStringsSep \" \" cfg.client.transparentProxy.allowSubnets}\r\n      # Uncomment this line to enable.\r\n      #++ (builtins.map (_lan: { table = \"raw\"; command = \"INPUT -s ${_lan} -j ACCEPT\"; }) cfg.client.transparentProxy.allowSubnets)\r\n\r\n      ++ [\r\n        # Log everything else\r\n        # Uncomment to enable logging\r\n        # # iptables -A INPUT -j LOG --log-prefix \"Dropped INPUT packet: \" --log-level 7 --log-uid\r\n        #{ table = \"raw\"; command = \"INPUT -j LOG --log-prefix \"Dropped INPUT packet: \" --log-level 7 --log-uid\"; }\r\n\r\n        # Drop everything else\r\n        # iptables -A INPUT -j DROP\r\n        { table = \"raw\"; command = \"INPUT -j DROP\"; }\r\n\r\n        ### *filter FORWARD\r\n        # Drop everything else\r\n        # iptables -A FORWARD -j DROP\r\n        { table = \"raw\"; command = \"FORWARD -j DROP\"; }\r\n\r\n        ### *filter OUTPUT\r\n        # Drop everything else\r\n        # iptables -A OUTPUT -m state --state INVALID -j DROP\r\n        { table = \"raw\"; command = \"OUTPUT -m state --state INVALID -j DROP\"; }\r\n\r\n        ### *filter OUTPUT\r\n        # Drop everything else\r\n        # iptables -A OUTPUT -m state --state ESTABLISHED -j ACCEPT\r\n        { table = \"raw\"; command = \"OUTPUT -m state --state ESTABLISHED -j ACCEPT\"; }\r\n\r\n        # Allow Tor process output\r\n        # iptables -A OUTPUT -o $_out_if -m owner --uid-owner $_tor_uid -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j ACCEPT\r\n        { table = \"raw\"; command = \"OUTPUT -o ${cfg.client.transparentProxy.externalInterface} -m owner --uid-owner ${builtins.toString config.ids.uids.tor} -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m state --state NEW -j ACCEPT\"; }\r\n\r\n        # Allow loopback output\r\n        # iptables -A OUTPUT -d 127.0.0.1/32 -o lo -j ACCEPT\r\n        { table = \"raw\"; command = \"OUTPUT -d 127.0.0.1/32 -o lo -j ACCEPT\"; }\r\n\r\n        # Tor transproxy magic\r\n        # iptables -A OUTPUT -d 127.0.0.1/32 -p tcp -m tcp --dport $_trans_port --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT\r\n        { table = \"raw\"; command = \"OUTPUT -d 127.0.0.1/32 -p tcp -m tcp --dport ${builtins.toString (builtins.elemAt cfg.settings.TransPort 0).port} --tcp-flags FIN,SYN,RST,ACK SYN -j ACCEPT\"; }\r\n\r\n      ]\r\n\r\n      # Allow OUTPUT to lan hosts in ${builtins.concatStringsSep \" \" cfg.client.transparentProxy.allowSubnets}\r\n      # # for _lan in $_non_tor; do\r\n      # #  iptables -A OUTPUT -d $_lan -j ACCEPT\r\n      # # done\r\n      # Uncomment this line to enable.\r\n      #++ (builtins.map (_lan: { table = \"raw\"; command = \"OUTPUT -d ${_lan} -j ACCEPT\"; }) cfg.client.transparentProxy.allowSubnets)\r\n\r\n      ++ [\r\n        # Log everything else. Uncomment to enable logging\r\n        # # iptables -A OUTPUT -j LOG --log-prefix \"Dropped OUTPUT packet: \" --log-level 7 --log-uid\r\n        #{ table = \"raw\"; command = \"OUTPUT -j LOG --log-prefix \"Dropped OUTPUT packet: \" --log-level 7 --log-uid\"; }\r\n\r\n        # Drop everything else. Uncomment to enable logging\r\n        # TODO is this different from iptables -P INPUT DROP\r\n        # iptables -A OUTPUT -j DROP\r\n        { table = \"raw\"; command = \"OUTPUT -j DROP\"; }\r\n      ]\r\n      ;\r\n\r\n    in\r\n    #lib.traceSeqN 5 { inherit iptablesCommands; } # debug\r\n    {\r\n      # TODO verify /etc/resolv.conf\r\n      # TODO - DNSPort 9053\r\n      # TODO + DNSPort 53\r\n      # no. this would be networking.firewall.nameservers\r\n      # but should be networking.nameservers\r\n      #nameservers = mkForce [ \"127.0.0.1\" ];\r\n\r\n      # TODO disable \"sudo\" and \"wheel\" inside the container\r\n\r\n      extraCommands = ''\r\n        # Cleanup old iptables entries which might be still there\r\n        # while loop to delete multiple copies of a rule\r\n        ${concatMapStringsSep \"\\n\" ({table, command}: \"while iptables -w -t ${table} -D ${command} 2>/dev/null; do :; done\") iptablesCommands}\r\n\r\n        ${concatMapStringsSep \"\\n\" ({table, command}: \"iptables -w -t ${table} -A ${command}\"                           ) iptablesCommands}\r\n\r\n        ${\"\" /*\r\n        # networking/sslh.nix\r\n        # Configure routing for those marked packets\r\n        ip rule  add fwmark 0x2 lookup 100\r\n        ip route add local 0.0.0.0/0 dev lo table 100\r\n        */}\r\n\r\n        ### Set default policies to DROP\r\n        # TODO is this different from { table = \"raw\"; command = \"OUTPUT -j DROP\"; }\r\n        iptables -P INPUT DROP\r\n        iptables -P FORWARD DROP\r\n        iptables -P OUTPUT DROP\r\n\r\n      '' + optionalString config.networking.enableIPv6 ''\r\n        ${\"\" /*\r\n        # Cleanup old iptables entries which might be still there\r\n        # while loop to delete multiple copies of a rule\r\n        ${concatMapStringsSep \"\\n\" ({table, command}: \"while ip6tables -w -t ${table} -D ${command} 2>/dev/null; do :; done\") ip6tablesCommands}\r\n\r\n        ${concatMapStringsSep \"\\n\" ({table, command}: \"ip6tables -w -t ${table} -A ${command}\"                           ) ip6tablesCommands}\r\n        */}\r\n\r\n        ${\"\" /*\r\n        # networking/sslh.nix\r\n        ip -6 rule  add fwmark 0x2 lookup 100\r\n        ip -6 route add local ::/0 dev lo table 100\r\n        */}\r\n\r\n        ### Set default policies to DROP for IPv6\r\n        ip6tables -P INPUT DROP\r\n        ip6tables -P FORWARD DROP\r\n        ip6tables -P OUTPUT DROP\r\n      '';\r\n\r\n      extraStopCommands = ''\r\n        ${concatMapStringsSep \"\\n\" ({table, command}: \"iptables -w -t ${table} -D ${command}\") iptablesCommands}\r\n\r\n        ${\"\" /*\r\n        # networking/sslh.nix\r\n        ip rule  del fwmark 0x2 lookup 100\r\n        ip route del local 0.0.0.0/0 dev lo table 100\r\n        */}\r\n\r\n        ### Set default policies to ACCEPT\r\n        iptables -P INPUT ACCEPT\r\n        iptables -P FORWARD ACCEPT\r\n        iptables -P OUTPUT ACCEPT\r\n      '' + optionalString config.networking.enableIPv6 ''\r\n        ${concatMapStringsSep \"\\n\" ({table, command}: \"ip6tables -w -t ${table} -D ${command}\") ip6tablesCommands}\r\n\r\n        ${\"\" /*\r\n        # networking/sslh.nix\r\n        ip -6 rule  del fwmark 0x2 lookup 100\r\n        ip -6 route del local ::/0 dev lo table 100\r\n        */}\r\n\r\n        ### Set default policies to ACCEPT for IPv6\r\n        ip6tables -P INPUT ACCEPT\r\n        ip6tables -P FORWARD ACCEPT\r\n        ip6tables -P OUTPUT ACCEPT\r\n      '';\r\n    })));\r\n\r\n    systemd.services.tor = {\r\n      description = \"Tor Daemon\";\r\n      path = [ pkgs.tor ];\r\n\r\n      wantedBy = [ \"multi-user.target\" ];\r\n      after    = [ \"network.target\" ];\r\n      restartTriggers = [ torrc ];\r\n\r\n      serviceConfig = {\r\n        Type = \"simple\";\r\n        User = \"tor\";\r\n        Group = \"tor\";\r\n        ExecStartPre = [\r\n          \"${cfg.package}/bin/tor -f ${torrc} --verify-config\"\r\n          # DOC: Appendix G of https://spec.torproject.org/rend-spec-v3\r\n          (\"+\" + pkgs.writeShellScript \"ExecStartPre\" (concatStringsSep \"\\n\" (flatten ([\"set -eu\"] ++\r\n            mapAttrsToList (name: onion:\r\n              optional (onion.authorizedClients != []) ''\r\n                rm -rf ${escapeShellArg onion.path}/authorized_clients\r\n                install -d -o tor -g tor -m 0700 ${escapeShellArg onion.path} ${escapeShellArg onion.path}/authorized_clients\r\n              '' ++\r\n              imap0 (i: pubKey: ''\r\n                echo ${pubKey} |\r\n                install -o tor -g tor -m 0400 /dev/stdin ${escapeShellArg onion.path}/authorized_clients/${toString i}.auth\r\n              '') onion.authorizedClients ++\r\n              optional (onion.secretKey != null) ''\r\n                install -d -o tor -g tor -m 0700 ${escapeShellArg onion.path}\r\n                key=\"$(cut -f1 -d: ${escapeShellArg onion.secretKey} | head -1)\"\r\n                case \"$key\" in\r\n                 (\"== ed25519v\"*\"-secret\")\r\n                  install -o tor -g tor -m 0400 ${escapeShellArg onion.secretKey} ${escapeShellArg onion.path}/hs_ed25519_secret_key;;\r\n                 (*) echo >&2 \"NixOS does not (yet) support secret key type for onion: ${name}\"; exit 1;;\r\n                esac\r\n              ''\r\n            ) cfg.relay.onionServices ++\r\n            mapAttrsToList (name: onion: imap0 (i: prvKeyPath:\r\n              let hostname = removeSuffix \".onion\" name; in ''\r\n              printf \"%s:\" ${escapeShellArg hostname} | cat - ${escapeShellArg prvKeyPath} |\r\n              install -o tor -g tor -m 0700 /dev/stdin \\\r\n               ${runDir}/ClientOnionAuthDir/${escapeShellArg hostname}.${toString i}.auth_private\r\n            '') onion.clientAuthorizations)\r\n            cfg.client.onionServices\r\n          ))))\r\n        ];\r\n        ExecStart = \"${cfg.package}/bin/tor -f ${torrc}\";\r\n        ExecReload = \"${pkgs.coreutils}/bin/kill -HUP $MAINPID\";\r\n        KillSignal = \"SIGINT\";\r\n        TimeoutSec = cfg.settings.ShutdownWaitLength + 30; # Wait a bit longer than ShutdownWaitLength before actually timing out\r\n        Restart = \"on-failure\";\r\n        LimitNOFILE = 32768;\r\n        RuntimeDirectory = [\r\n          # g+x allows access to the control socket\r\n          \"tor\"\r\n          \"tor/root\"\r\n          # g+x can't be removed in ExecStart=, but will be removed by Tor\r\n          \"tor/ClientOnionAuthDir\"\r\n        ];\r\n        RuntimeDirectoryMode = \"0710\";\r\n        StateDirectoryMode = \"0700\";\r\n        StateDirectory = [\r\n            \"tor\"\r\n            \"tor/onion\"\r\n          ] ++\r\n          flatten (mapAttrsToList (name: onion:\r\n            optional (onion.secretKey == null) \"tor/onion/${name}\"\r\n          ) cfg.relay.onionServices);\r\n        # The following options are only to optimize:\r\n        # systemd-analyze security tor\r\n        RootDirectory = runDir + \"/root\";\r\n        RootDirectoryStartOnly = true;\r\n        #InaccessiblePaths = [ \"-+${runDir}/root\" ];\r\n        UMask = \"0066\";\r\n        BindPaths = [ stateDir ];\r\n        BindReadOnlyPaths = [ storeDir \"/etc\" ] ++\r\n          optionals config.services.resolved.enable [\r\n            \"/run/systemd/resolve/stub-resolv.conf\"\r\n            \"/run/systemd/resolve/resolv.conf\"\r\n          ];\r\n        AmbientCapabilities   = [\"\"] ++ lib.optional bindsPrivilegedPort \"CAP_NET_BIND_SERVICE\";\r\n        CapabilityBoundingSet = [\"\"] ++ lib.optional bindsPrivilegedPort \"CAP_NET_BIND_SERVICE\";\r\n        # ProtectClock= adds DeviceAllow=char-rtc r\r\n        DeviceAllow = \"\";\r\n        LockPersonality = true;\r\n        MemoryDenyWriteExecute = true;\r\n        NoNewPrivileges = true;\r\n        PrivateDevices = true;\r\n        PrivateMounts = true;\r\n        PrivateNetwork = mkDefault false;\r\n        PrivateTmp = true;\r\n        # Tor cannot currently bind privileged port when PrivateUsers=true,\r\n        # see https://gitlab.torproject.org/legacy/trac/-/issues/20930\r\n        PrivateUsers = !bindsPrivilegedPort;\r\n        ProcSubset = \"pid\";\r\n        ProtectClock = true;\r\n        ProtectControlGroups = true;\r\n        ProtectHome = true;\r\n        ProtectHostname = true;\r\n        ProtectKernelLogs = true;\r\n        ProtectKernelModules = true;\r\n        ProtectKernelTunables = true;\r\n        ProtectProc = \"invisible\";\r\n        ProtectSystem = \"strict\";\r\n        RemoveIPC = true;\r\n        RestrictAddressFamilies = [ \"AF_UNIX\" \"AF_INET\" \"AF_INET6\" \"AF_NETLINK\" ];\r\n        RestrictNamespaces = true;\r\n        RestrictRealtime = true;\r\n        RestrictSUIDSGID = true;\r\n        # See also the finer but experimental option settings.Sandbox\r\n        SystemCallFilter = [\r\n          \"@system-service\"\r\n          # Groups in @system-service which do not contain a syscall listed by:\r\n          # perf stat -x, 2>perf.log -e 'syscalls:sys_enter_*' tor\r\n          # in tests, and seem likely not necessary for tor.\r\n          \"~@aio\" \"~@chown\" \"~@keyring\" \"~@memlock\" \"~@resources\" \"~@setuid\" \"~@timer\"\r\n        ];\r\n        SystemCallArchitectures = \"native\";\r\n        SystemCallErrorNumber = \"EPERM\";\r\n      };\r\n    };\r\n\r\n    environment.systemPackages = [ cfg.package ];\r\n  });\r\n\r\n  meta.maintainers = with lib.maintainers; [ julm ];\r\n}\r\n```\r\n\r\n</details>\r\n\r\nyeah i know, i should make a nixos-config repo...\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-02-23T17:22:24Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/35#issuecomment-1985775798",
    "issue": "https://github.com/milahu/nixpkgs/issues/35",
    "user": "https://github.com/milahu",
    "body": "actually, this is a good change. more verbose, but meh",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-03-08T14:18:06Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/42#issuecomment-2054197504",
    "issue": "https://github.com/milahu/nixpkgs/issues/42",
    "user": "https://github.com/numinit",
    "body": "@milahu hmm... promise you this isn't an insane change:\r\n\r\nhttps://github.com/klee/klee/releases/tag/v3.1\r\n\r\n> Current recommended version is still LLVM 13\r\n\r\nI do see the reasoning for the override though.",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-14T22:01:46Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/42#issuecomment-2054197727",
    "issue": "https://github.com/milahu/nixpkgs/issues/42",
    "user": "https://github.com/numinit",
    "body": "Do you want to submit a PR with the llvmPackages overridable? Now that Klee supports multiple versions (which it hasn't cleanly always, but 3.1 adds 15 and 16 support) this sounds useful. I'd approve for merge, and push for a backport if possible.",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-14T22:02:41Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/42#issuecomment-2055615123",
    "issue": "https://github.com/milahu/nixpkgs/issues/42",
    "user": "https://github.com/milahu",
    "body": "> Current recommended version is still LLVM 13\r\n\r\noh okay... stability\r\ni have not-yet used klee in runtime, but at least the build passes with llvm 16\r\n\r\n> Do you want to submit a PR\r\n\r\n\"want\" yes ^^ but im banned from nixos for stupid reasons\r\nso i only publish to my nur-packages, and (mostly) talk to myself here\r\n\r\nfeel free to use my code, i dont need attribution\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-15T06:38:19Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/42#issuecomment-2055822015",
    "issue": "https://github.com/milahu/nixpkgs/issues/42",
    "user": "https://github.com/numinit",
    "body": "No problem, thanks for your contribution.\r\n\r\n`https://github.com/NixOS/nixpkgs/pull/304204`",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-15T07:23:28Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/42#issuecomment-2055896152",
    "issue": "https://github.com/milahu/nixpkgs/issues/42",
    "user": "https://github.com/milahu",
    "body": "thanks : )\r\n\r\nmoving `kleeuClibc` to `final.passthru.uclibc` looks weird...\r\n\r\ni guess your intention was to make this overridable, but i dont think this works\r\nusually this is done like\r\n\r\n```\r\n{ lib\r\n, llvmPackages\r\n, callPackage\r\n# ...\r\n, klee-uclibc ? (callPackage ./klee-uclibc.nix {\r\n  inherit stdenv clang llvm extraKleeuClibcConfig debugRuntime runtimeAsserts;\r\n})\r\n}:\r\nlet\r\n  # Python used for KLEE tests.\r\n  kleePython = python3.withPackages (ps: with ps; [ tabulate ]);\r\nin\r\nllvmPackages.stdenv.mkDerivation rec {\r\n# ...\r\n  passthru = {\r\n    # Let the user depend on `klee.uclibc` for klee-uclibc\r\n    uclibc = klee-uclibc;\r\n  };\r\n```\r\n\r\nand\r\n\r\n```\r\nklee.override { klee-uclibc = some-other-klee-uclibc; }\r\n```\r\n\r\nbut realistically, no one will need to override that\r\n\r\nby the way, no need to escape that url\r\nhttps://github.com/NixOS/nixpkgs/pull/304204\r\nmentions from banned users (and their repos) are not visible\r\n",
    "formatter": "markdown",
    "reactions": [
      {
        "user": "https://github.com/numinit",
        "content": "+1",
        "subject_type": "IssueComment",
        "created_at": "2024-04-16T06:27:06.608+02:00"
      }
    ],
    "created_at": "2024-04-15T07:37:30Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/42#issuecomment-2058189663",
    "issue": "https://github.com/milahu/nixpkgs/issues/42",
    "user": "https://github.com/numinit",
    "body": "It actually exposes it via overrideAttrs and the `final` variable. Try this to force a rebuild by messing with the derivation:\r\n\r\n`nix-build -E '(import ./. {}).klee.overrideAttrs (prev: { passthru.uclibc = prev.passthru.uclibc.overrideAttrs { foo = \"bar\"; }; })'`",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-16T04:06:39Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/42#issuecomment-2058445667",
    "issue": "https://github.com/milahu/nixpkgs/issues/42",
    "user": "https://github.com/milahu",
    "body": "problem with overrideAttrs is that\r\noverrideAttrs fails to override derived attributes https://github.com/milahu/nixpkgs/issues/34\r\n\r\nklee-uclibc is just another input package\r\nso it belongs to the function parameters\r\nwhere we can use override\r\n\r\n> why? i need `klee` for [s2e](https://github.com/S2E/s2e) ([s2e.nix](https://github.com/milahu/nur-packages/blob/master/pkgs/development/libraries/s2e/default.nix)) for [binrec](https://github.com/trailofbits/binrec-tob)\r\n\r\ni gave up on that quest.\r\ns2e uses an old klee from 2009 when there was llvm 2.4.\r\noldest llvm in nixpkgs is llvm 11, but that fails to compile s2e-klee.\r\nso to get that working, i would have to build llvm 2.4 first...\r\ni will have to find a better tool for dynamic analysis, maybe frida\r\n\r\nedit:\r\n\r\n> s2e uses an old klee from 2009 when there was llvm 2.4\r\n\r\nbut s2e uses llvm 14, so \"somehow\" this has to work\r\ntodo: check again the Makefile and CMakeLists.txt files of s2e\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-16T07:42:54Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/34#issuecomment-2061189588",
    "issue": "https://github.com/milahu/nixpkgs/issues/34",
    "user": "https://github.com/milahu",
    "body": "already solved by finalAttrs\r\n\r\n[nixpkgs/pkgs/by-name/he/hello/package.nix](https://github.com/NixOS/nixpkgs/blob/master/pkgs/by-name/he/hello/package.nix)\r\n\r\n```nix\r\n{ callPackage\r\n, lib\r\n, stdenv\r\n, fetchurl\r\n, nixos\r\n, testers\r\n, hello\r\n}:\r\n\r\nstdenv.mkDerivation (finalAttrs: {\r\n  pname = \"hello\";\r\n  version = \"2.12.1\";\r\n\r\n  src = fetchurl {\r\n    url = \"mirror://gnu/hello/hello-${finalAttrs.version}.tar.gz\";\r\n    sha256 = \"sha256-jZkUKv2SV28wsM18tCqNxoCZmLxdYH2Idh9RLibH2yA=\";\r\n  };\r\n\r\n```\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-17T12:52:02Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/45#issuecomment-2063453542",
    "issue": "https://github.com/milahu/nixpkgs/issues/45",
    "user": "https://github.com/milahu",
    "body": "> im starting to notice a pattern... : P\r\n\r\naah! nevermind, im an idiot ^^\r\ni got confused by the repl, which shows quoted strings...\r\n\r\n```\r\nnix-repl> lib.escapeShellArg (builtins.concatStringsSep \"\\n\" [ \"a\" \"b\" ]) == \"'a\\nb'\"\r\ntrue\r\n```\r\n\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-18T09:40:02Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/47#issuecomment-2069358162",
    "issue": "https://github.com/milahu/nixpkgs/issues/47",
    "user": "https://github.com/lucasew",
    "body": "Right now wine packaging is basically a hack because wine doesn't like immutability. A proper way IMO would be to implement some kind of dotd migration of the registry database and overlay the prefix data so the default stuff is not just copied over. Right now I still use my workaround for 7zip because I prefer the windows gui and it runs well and for games and stuff I just use proton.",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-22T13:04:46Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/47#issuecomment-2079870363",
    "issue": "https://github.com/milahu/nixpkgs/issues/47",
    "user": "https://github.com/emmanuelrosa",
    "body": "1. Creating a Wine prefix in the Nix store is nearly impossible because Wine is a highly-stateful application. It uses all kinds of data about it's runtime environmnent, making it very difficult to build a Wine prefix in a reproduceable way.\r\n2. I looked into deduplication of the Wine prefix against the Wine package in the Nix store, but it didn't work because the dedup tools (fdupes, jdupes, duperemove) don't deduplicate across directory trees; They only deduplicate _within_ a directory tree. It may be possible to overcome this limitation by creating a temporary directory which then contains symlinks to the appropriate path in the Nix store and also the Wine prefix, and then deduplication the temporary directory.\r\n3. `mkWindowsApp` already makes use of layered filesystems (implemented with unionfs) to save on disk space; It's the reason I went through the head-scratching effort. But it only comes into play when using multiple applications with the same version of Wine. For example, if you have two apps which use Wine64-full, then they would both share the same base Wine64-full Wine prefix.\r\n4. There's an effort to add support for reflink copying of files to Wine. It would only work on filesystems which support COW, such as BTRFS and XFS (my recommendation), and only when the Nix store and $HOME directories are on the same filesystem. But having reflink support in Wine would be amazing! Not only would it save on disk space, it should also make Wine prefix creation much faster since less data would need to be copied.  I don't know the status of this effort.",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-26T18:10:17Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/47#issuecomment-2080407811",
    "issue": "https://github.com/milahu/nixpkgs/issues/47",
    "user": "https://github.com/milahu",
    "body": "basically there are 2 cases\r\n\r\n- stateless apps: no config, no cache\r\n- stateful apps\r\n\r\n### stateless apps\r\n\r\nstateless apps are simple command line tools like [qaac](https://github.com/milahu/nur-packages/tree/master/pkgs/applications/audio/qaac) or [nmake](https://github.com/milahu/microsoft-nmake)\r\nthese should work with a read-only `$WINEPREFIX` in `/nix/store`\r\nand store nothing in `$HOME`\r\n\r\nto make this work without recompiling wine\r\nim currently messing with dynamic binary patching of wine\r\n\r\nin the wine source, this looks like\r\n\r\n```c\r\n// server/request.c\r\n    if (st->st_uid != getuid()) fatal_error( \"%s is not owned by you\\n\", name );\r\n\r\n// server/request.c\r\n    if (st.st_uid != getuid())\r\n        fatal_error( \"%s is not owned by you\\n\", config_dir );\r\n\r\n// dlls/ntdll/unix/server.c\r\n    if (st.st_uid != getuid()) fatal_error( \"'%s' is not owned by you\\n\", config_dir );\r\n\r\n// dlls/ntdll/unix/server.c\r\n    if (st.st_uid != getuid()) fatal_error( \"'%s' is not owned by you\\n\", server_dir );\r\n```\r\n\r\nin this pseudo-assembly code i want to replace `jne` with `nop`\r\n\r\n```\r\nset $eax \"WINEPREFIX\"\r\ncall getenv ; -> $eax = \"/path/to/wineprefix\"\r\ncall stat ; -> $eax = struct stat { ... }\r\nset $ebx result_of_stat\r\n\r\ncall getuid ; -> $eax = 1000\r\ncmp $eax,($ebx + stat_uid_offset)\r\njne call_fatal_error ; conditional jump to call_fatal_error\r\n\r\n; call_fatal_error exits wine with\r\n; \"%s is not owned by you\\n\" or\r\n; \"'%s' is not owned by you\\n\"\r\n```\r\n\r\nwith static binary patching of `/nix/store/fa1fn9p561cy7nlzvdgmkgzpy20fxcm5-wine-9.0`\r\nthis looks like\r\n\r\n```\r\nsed -i 's/\\x39\\xc6\\x0f\\x85\\x47\\x04\\x00\\x00/\\x39\\xc6\\x90\\x90\\x90\\x90\\x90\\x90/' lib/wine/i386-unix/ntdll.so\r\nsed -i 's/\\x39\\xc6\\x0f\\x85\\x8b\\x06\\x00\\x00/\\x39\\xc6\\x90\\x90\\x90\\x90\\x90\\x90/' lib/wine/i386-unix/ntdll.so\r\nsed -i 's/\\x39\\xc5\\x0f\\x85\\x9f\\x00\\x00\\x00/\\x39\\xc5\\x90\\x90\\x90\\x90\\x90\\x90/' bin/wineserver\r\nsed -i 's/\\x39\\xc7\\x0f\\x85\\x34\\x03\\x00\\x00/\\x39\\xc7\\x90\\x90\\x90\\x90\\x90\\x90/' bin/wineserver\r\n#         cmp     jne.....call_fatal_error cmp     6x nop\r\n```\r\n\r\nthe challenge here is to find\r\na dynamic way to find the `jne call_fatal_error` instructions\r\n\r\nthe error can be triggered by\r\n`WINEPREFIX=/var/empty wine cmd.exe` or\r\n`WINEPREFIX=/var/empty wineboot --init`\r\nbecause `/var/empty` is owned by root\r\n\r\nso now i only have to trace all instructions leading to `fatal_error`\r\nwhich is harder than expected... but im getting there\r\neither with `gdb` or `lldb`\r\n\r\n### stateful apps\r\n\r\nstateful apps need to store config and cache in `$HOME`\r\nso we need a way to merge a read-only wineprefix in `/nix/store`\r\nwith a writable `$WINEPREFIX` in `$HOME`\r\n\r\nideally this merging of wineprefixes should also work on ext4 without cow\r\nwhich leaves us with symlinks\r\n\r\nalso, no cleanup code should be required to commit changes to `$HOME`\r\nbecause that means data loss on `kill -9`\r\n\r\n`$WINEPREFIX` is created by `wineboot --init`\r\nso we will have to wrap or patch `wineboot`\r\n\r\none challenge here is to identify a minimal list of writable files\r\nthe app install would run in `installPhase`\r\n\r\ngui installs are possible with `Xvnc` and `xdotool`\r\n\r\n<details>\r\n<summary>\r\ngui scripting with Xvnc and xdotool\r\n</summary>\r\n\r\nida.nix\r\n\r\n```nix\r\n{ lib\r\n, stdenvNoCC\r\n#, fetchtorrent\r\n, fetchtorrent-aria\r\n, unzip\r\n, unrar # unfree\r\n#, p7zip\r\n, wine\r\n, wine64\r\n, python3\r\n, xdotool\r\n#, wmctrl # remove?\r\n, openbox\r\n, imagemagick # import -> screenshot\r\n, tigervnc\r\n}:\r\n\r\nstdenvNoCC.mkDerivation {\r\n\r\n  pname = \"ida\";\r\n  version = \"6.8.150423\";\r\n\r\n  src = fetchtorrent-aria {\r\n    btih = \"dc8f219aab676a5dd0d2efb35db4a79225a0ba10\";\r\n    hash = \"sha256-zKlvm26GPbs7PdaceOuvifuU1ualA/GbiMRH5sAykA8=\";\r\n  };\r\n\r\n  nativeBuildInputs = [\r\n    unzip\r\n    unrar\r\n    #p7zip\r\n    wine\r\n    wine64\r\n    tigervnc\r\n    xdotool\r\n    #wmctrl\r\n    openbox\r\n    imagemagick\r\n  ];\r\n\r\n  buildPhase = ''\r\n    _get_screenshot() {\r\n      #import -window root -crop $crop -colorspace Gray $1\r\n      import -window root -colorspace Gray $1\r\n    }\r\n\r\n    _capture_hash() {\r\n      _get_screenshot screenshot.png\r\n      if [ -e screenshot.png ]; then\r\n        h=$(md5sum screenshot.png | cut -c1-32)\r\n        echo \"$h\"\r\n        rm screenshot.png\r\n      fi\r\n    }\r\n\r\n    _window_name() {\r\n      local i=$(xdotool getactivewindow 2>/dev/null || true)\r\n      [ -z \"$i\" ] && return\r\n      local n=$(xdotool getwindowname $i 2>/dev/null || true)\r\n      [ -z \"$n\" ] && return\r\n      echo \"$i: $n\"\r\n    }\r\n\r\n    _sleep() {\r\n      local t=0\r\n      local c=0\r\n      local a\r\n      local o\r\n      for a in \"$@\"; do case \"$a\" in\r\n        -c) c=1;;\r\n        *) t=\"$a\";;\r\n      esac; done\r\n      if [ \"$t\" = 0 ]; then echo \"_sleep: error: time argument is missing\"; return 1; fi\r\n      for ((k=0;k<$t;k++)); do\r\n        #_list_windows # debug\r\n        c=0; screenshot_hash_prev= # dont wait for change\r\n        _get_screenshot screenshot.png\r\n        if [ -e screenshot.png ]; then\r\n          h=$(md5sum screenshot.png | cut -c1-32)\r\n          if [ \"$h\" != \"$screenshot_hash_prev\" ]; then\r\n            o=screenshot.$(printf \"%03d\" $screenshot_id).png\r\n            mv screenshot.png $o\r\n            echo \"done $o $h @ $(_window_name)\"\r\n            screenshot_hash_prev=\"$h\"\r\n            [ $c = 1 ] && break # wait for change\r\n          else\r\n            rm screenshot.png\r\n          fi\r\n        fi\r\n        : $((screenshot_id++))\r\n        sleep 1\r\n      done\r\n    }\r\n\r\n    _list_windows() {\r\n      local id\r\n      local name\r\n      echo \"windows:\"\r\n      for id in $(xdotool search --name '.+'); do\r\n        name=$(xdotool getwindowname $id 2>/dev/null || true)\r\n        [ -z \"$name\" ] && continue\r\n        echo \"  $id: $name\"\r\n      done\r\n    }\r\n\r\n    _wait_for_window() {\r\n      echo \"_wait_for_window: waiting for window: ''${1@Q}\"\r\n      local n\r\n      local i\r\n      for ((i=0;i<60;i++)); do\r\n        n=$(xdotool getactivewindow getwindowname 2>/dev/null || true)\r\n        if [ \"$n\" = \"$1\" ]; then\r\n          return 0\r\n        fi\r\n        _sleep 1\r\n      done\r\n      echo \"_wait_for_window: error: timeout\"\r\n      return 1\r\n    }\r\n\r\n    _wait_for_empty_desktop() {\r\n      _wait_for_window \"\"\r\n    }\r\n\r\n    ###\r\n\r\n    for zip in *.zip; do\r\n      unzip -o \"$zip\"\r\n    done\r\n    rm *.zip\r\n\r\n    unrar x IDAPr68.rar\r\n    #7z x IDAPr68.rar # error: Can't open as archive\r\n    rm IDAPr68.r??\r\n\r\n    export HOME=$out/home\r\n    mkdir -p $HOME\r\n\r\n    #set -x\r\n\r\n    export WINEPREFIX=\"$HOME/wine\"\r\n\r\n    # disable wine error messages by default\r\n    #export WINEDEBUG=\"${WINEDEBUG:=-all}\"\r\n    export WINEDEBUG='-all'\r\n\r\n    # Initialize the WINEPREFIX.\r\n    # the wine configuration is being updated, please wait...\r\n    # FIXME wrap wineboot, symlink files from nix store\r\n    wineboot --init\r\n\r\n    export DISPLAY=:2\r\n\r\n    Xvnc -SecurityTypes None -geometry 800x600 -depth 16 -localhost -ZlibLevel 0 -Log '*:stderr:0' $DISPLAY &\r\n    xvnc_pid=$!\r\n\r\n    echo 'waiting for Xvnc'\r\n    sleep 3\r\n\r\n    # start window manager\r\n    # needed to switch between windows: ida installer, python installer\r\n    openbox &\r\n    echo 'waiting for openbox'\r\n    sleep 2\r\n\r\n    screenshot_hash_empty=$(_capture_hash)\r\n    screenshot_hash_prev=\r\n    screenshot_id=0\r\n\r\n    echo \"empy desktop screenshot hash: $screenshot_hash_empty\"\r\n\r\n    echo 'starting: install ida'\r\n    wine idapronw_hexarmw_hexx64w_hexx86w_150413_cb5d8b3937caf856aaae750455d2b4ae.exe &\r\n    wine_pid=$!\r\n\r\n    echo 'waiting for dialog: install ida'\r\n    _wait_for_window \"Setup - IDA Pro v6.8 and Hex-Rays Decompiler (ARM,x64,x86)\"\r\n    ida_window=$(xdotool getactivewindow)\r\n    xdotool key Enter # click \"next\" \r\n\r\n    # TODO check if $wine_pid is still running\r\n\r\n    echo 'waiting for input: accept license'\r\n    _sleep -c 2\r\n    xdotool key Tab # focus yes/no buttons\r\n    sleep 1\r\n    xdotool key Up\r\n    sleep 1\r\n    xdotool key space\r\n    sleep 1\r\n    xdotool key Enter # click \"next\" \r\n\r\n    echo 'waiting for input: install python'\r\n    _sleep -c 2\r\n    # leave enabled: \"install python 2.7\"\r\n    xdotool key Enter # click \"next\" \r\n\r\n    echo 'waiting for input: enter password'\r\n    _sleep -c 2\r\n    xdotool type $(cat install_pass.txt) # enter password\r\n    sleep 1\r\n    xdotool key Enter # click \"next\" \r\n\r\n    echo 'waiting for input: install path'\r\n    _sleep -c 2\r\n    # leave install path: \"C:\\Program Files\\IDA 6.8\"\r\n    xdotool key Enter # click \"next\" \r\n\r\n    echo 'waiting for input: create desktop icon'\r\n    _sleep -c 2\r\n    # leave disabled: \"create desktop icon\"\r\n    xdotool key Enter # click \"next\" \r\n\r\n    echo 'waiting for input: install button'\r\n    _sleep -c 2\r\n    xdotool key Enter # click \"next\" \r\n\r\n    echo 'waiting for ida install'\r\n    _sleep -c 30 # TODO dynamic: wait for active window name\r\n\r\n    echo 'waiting for dialog: python 2.7.6 setup'\r\n    _wait_for_window \"Python 2.7.6 Setup\"\r\n    # leave option: install for all users\r\n    xdotool key Enter # click \"next\" \r\n    # ida installer returns for 5 seconds\r\n\r\n    echo 'waiting for input: python install path'\r\n    _sleep -c 10 # TODO dynamic: wait for active window name\r\n    # leave install path: \"C:\\Python27\\\"\r\n    xdotool key Enter # click \"next\" \r\n\r\n    echo 'waiting for input: customize python'\r\n    _sleep -c 2\r\n    # leave settings: \"customize python\"\r\n    xdotool key Enter # click \"next\" \r\n\r\n    echo 'waiting for python install'\r\n    _sleep -c 30 # wait for install # TODO dynamic\r\n    xdotool key Enter # click \"finish\" \r\n\r\n    # FIXME switch to window: setup ida pro\r\n    #xdotool getactivewindow\r\n    xdotool windowfocus $ida_window\r\n\r\n    echo 'waiting for input: launch IDA'\r\n    _sleep -c 2\r\n    xdotool key space\r\n\r\n    echo 'waiting for finish'\r\n    _sleep -c 2\r\n    xdotool key Enter # click \"finish\" \r\n\r\n    _sleep -c 1\r\n    # TODO assert empty desktop\r\n    echo \"TODO assert empty desktop: $(_capture_hash) versus $screenshot_hash_empty\"\r\n\r\n    echo 'waiting for install'\r\n    _wait_for_empty_desktop\r\n    #_sleep -c 5 # wait for wine, xvnc\r\n    _sleep 1\r\n\r\n    kill $wine_pid || true\r\n    echo 'waiting for Xvnc'\r\n    _sleep 1\r\n\r\n    kill $xvnc_pid || true\r\n  '';\r\n\r\n  /*\r\n    # debug\r\n    #mv screenshot.*.png $out; exit 0\r\n\r\n    # debug\r\n    echo ls $HOME/'.wine/drive_c/Program Files/IDA 6.8/'\r\n    ls $HOME/'.wine/drive_c/Program Files/IDA 6.8/'\r\n\r\n    # TODO create wrapper\r\n    # wine $HOME/'.wine/drive_c/Program Files/IDA 6.8/idaq64.exe'\r\n  */\r\n\r\n}\r\n```\r\n\r\n</details>\r\n\r\n\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-04-27T08:00:44Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/49#issuecomment-2088504006",
    "issue": "https://github.com/milahu/nixpkgs/issues/49",
    "user": "https://github.com/milahu",
    "body": "nope, this only happens when i build `scancode-toolkit` from git source\r\nand i dont build the index in\r\n`scancode-toolkit-32.1.0/lib/python3.11/site-packages/licensedcode/data/cache/`\r\n\r\nscancode-toolkit/src/scancode_config.py\r\n\r\n```py\r\n# we pre-build the index and bundle this with the the deployed release\r\n# therefore we use package data\r\n# .... but we accept this to be overriden with and env variable\r\nstd_license_cache_dir = join(scancode_src_dir, 'licensedcode', 'data', 'cache')\r\n__env_license_cache_dir = os.getenv('SCANCODE_LICENSE_INDEX_CACHE')\r\nlicensedcode_cache_dir = (__env_license_cache_dir or std_license_cache_dir)\r\n```\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-05-01T13:58:09Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/51#issuecomment-2099891782",
    "issue": "https://github.com/milahu/nixpkgs/issues/51",
    "user": "https://github.com/milahu",
    "body": "upstream issue\r\n\r\nthis is a \"pure gui\" app\r\n\r\n```\r\n$ org.nickvision.tagger --help\r\nUsage:\r\n  org.nickvision.tagger [OPTION…]\r\n\r\nHelp Options:\r\n  -h, --help                 Show help options\r\n  --help-all                 Show all help options\r\n  --help-gapplication        Show GApplication options\r\n```\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-05-08T07:08:43Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/50#issuecomment-2099893364",
    "issue": "https://github.com/milahu/nixpkgs/issues/50",
    "user": "https://github.com/milahu",
    "body": "not relevant\r\n\r\nthis is a \"pure gui\" app\r\n\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-05-08T07:09:34Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/52#issuecomment-2100940675",
    "issue": "https://github.com/milahu/nixpkgs/issues/52",
    "user": "https://github.com/milahu",
    "body": "next error\r\n\r\n```\r\n$ gitfs https://github.com/milahu/random mnt\r\nTraceback (most recent call last):\r\n  File \"/nix/store/8f0fyssl2ah5w34xqmxl2clpk0bjn8z6-gitfs-0.5.2/bin/.gitfs-wrapped\", line 9, in <module>\r\n    sys.exit(mount())\r\n             ^^^^^^^\r\n  File \"/nix/store/8f0fyssl2ah5w34xqmxl2clpk0bjn8z6-gitfs-0.5.2/lib/python3.11/site-packages/gitfs/__init__.py\", line 21, in mount\r\n    start_fuse()\r\n  File \"/nix/store/8f0fyssl2ah5w34xqmxl2clpk0bjn8z6-gitfs-0.5.2/lib/python3.11/site-packages/gitfs/mounter.py\", line 124, in start_fuse\r\n    args = parse_args(parser)\r\n           ^^^^^^^^^^^^^^^^^^\r\n  File \"/nix/store/8f0fyssl2ah5w34xqmxl2clpk0bjn8z6-gitfs-0.5.2/lib/python3.11/site-packages/gitfs/mounter.py\", line 44, in parse_args\r\n    return Args(parser)\r\n           ^^^^^^^^^^^^\r\n  File \"/nix/store/8f0fyssl2ah5w34xqmxl2clpk0bjn8z6-gitfs-0.5.2/lib/python3.11/site-packages/gitfs/utils/args.py\", line 67, in __init__\r\n    self.config = self.build_config(parser.parse_args())\r\n                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/nix/store/8f0fyssl2ah5w34xqmxl2clpk0bjn8z6-gitfs-0.5.2/lib/python3.11/site-packages/gitfs/utils/args.py\", line 76, in build_config\r\n    return self.check_args(self.set_defaults(args))\r\n                           ^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/nix/store/8f0fyssl2ah5w34xqmxl2clpk0bjn8z6-gitfs-0.5.2/lib/python3.11/site-packages/gitfs/utils/args.py\", line 154, in set_defaults\r\n    value = value(args)\r\n            ^^^^^^^^^^^\r\n  File \"/nix/store/8f0fyssl2ah5w34xqmxl2clpk0bjn8z6-gitfs-0.5.2/lib/python3.11/site-packages/gitfs/utils/args.py\", line 185, in get_repo_path\r\n    return tempfile.mkdtemp(dir=\"/var/lib/gitfs\")\r\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  File \"/nix/store/glfr70gi7hfaj50mwj2431p8bg60fhqw-python3-3.11.9/lib/python3.11/tempfile.py\", line 385, in mkdtemp\r\n    _os.mkdir(file, 0o700)\r\nFileNotFoundError: [Errno 2] No such file or directory: '/var/lib/gitfs/tmp4lse9rz9'\r\n```\r\n\r\nlooks like nobody is using gitfs from nixpkgs\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-05-08T16:18:50Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/56#issuecomment-2132172616",
    "issue": "https://github.com/milahu/nixpkgs/issues/56",
    "user": "https://github.com/davidak",
    "body": "i guess this should be an issue in the official repo?\r\n\r\nwhile this seems reasonable and i as package maintainer can decide that, there is no general rule to remove obscure packages when a more common tool does the same task. and i think consistency is very important for a good user experience\r\n\r\nit would be in line with my [suggested vision/goal for nixpkgs](https://discourse.nixos.org/t/vision-for-nixpkgs/11950?u=davidak): \r\n\r\n> extensive collection of **relevant** free software packages \r\n\r\nthanks for bringing this up!",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-05-26T10:44:18Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/56#issuecomment-2132192149",
    "issue": "https://github.com/milahu/nixpkgs/issues/56",
    "user": "https://github.com/milahu",
    "body": "> this should be an issue in the official repo\r\n\r\nim [banned](https://github.com/NixOS/moderation/commit/836964980e170fe6c856eb0296c27b8337309be8) from nixos...\r\n\r\n> there is no general rule to remove obscure packages\r\n> when a more common tool does the same task\r\n\r\nthere is an unwritten rule: thou shall not bloat\r\n\r\n`john` does a better job than `rarcrack`, its faster and more generic\r\nso keeping `rarcrack` is a waste of build time\r\n\r\nwhen people absolutely need `rarcrack`, there is [NUR](https://github.com/nix-community/NUR)\r\n\r\na legit duplicate would be [_7zz](https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/archivers/7zz/default.nix) and [p7zip](https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/archivers/p7zip/default.nix)\r\nbecause they [vary in implementation details](https://github.com/p7zip-project/p7zip/issues/225)\r\n\r\nor [rhash](https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/security/rhash/default.nix) vs [hashdeep](https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/security/hashdeep/default.nix) vs [hashrat](https://github.com/NixOS/nixpkgs/raw/master/pkgs/tools/security/hashrat/default.nix) ...\r\nthey are too different to consider them duplicates\r\n",
    "formatter": "markdown",
    "reactions": [
      {
        "user": "https://github.com/davidak",
        "content": "+1",
        "subject_type": "IssueComment",
        "created_at": "2024-05-26T15:43:24.149+02:00"
      }
    ],
    "created_at": "2024-05-26T11:54:26Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/42#issuecomment-2171012236",
    "issue": "https://github.com/milahu/nixpkgs/issues/42",
    "user": "https://github.com/numinit",
    "body": "latest should fix all this but has been in review for a while...\r\n\r\nhttps://github.com/NixOS/nixpkgs/pull/304204",
    "formatter": "markdown",
    "reactions": [
      {
        "user": "https://github.com/milahu",
        "content": "+1",
        "subject_type": "IssueComment",
        "created_at": "2024-06-16T11:17:18.915+02:00"
      }
    ],
    "created_at": "2024-06-16T02:07:56Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236141512",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/Kreyren",
    "body": "Why don't you submit the code as merge request in nixpkgs? Makes it easier to review ",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T10:14:54Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236173318",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/linsui",
    "body": "Because they are banned.",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T10:32:41Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236182708",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/linsui",
    "body": "https://github.com/NixOS/moderation/commit/836964980e170fe6c856eb0296c27b8337309be8",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T10:38:04Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236240078",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/milahu",
    "body": "\"they\" xD\r\ni was banned because i give a shit about \"modern feelings\", i only care about code\r\n\r\ni still think its interesting whether `haveno-reto` is actually working\r\nat least on the technical level, ignoring social problems like real-world scammers\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T11:11:28Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236256317",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/Kreyren",
    "body": "sounds like the thing i would get banned for :D\r\n\r\nMake that a merge request to an upstream branch that is synced with upstream and ping us",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T11:21:07Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236264651",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/milahu",
    "body": "nah, please help yourself\r\n\r\n```\r\ngit clone --depth=1 https://github.com/milahu/nur-packages\r\n\r\ncp -r nur-packages/pkgs/applications/blockchains/haveno \\\r\n  ~/src/nixpkgs/pkgs/applications/blockchains\r\n```\r\n\r\nhttps://github.com/NixOS/moderation/commit/836964980e170fe6c856eb0296c27b8337309be8#commitcomment-144375785\r\n\r\n> rationale for milanu ban plz\r\n\r\nsee my [hate-maintainers-censored](https://github.com/milahu/hate-maintainers-censored)\r\n\r\ntldr: im \"too rude\" in my comments\r\nand someone from \"the nix community\" stalked some of my social feeds\r\nand he didnt like my opinions\r\n",
    "formatter": "markdown",
    "reactions": [
      {
        "user": "https://github.com/Kreyren",
        "content": "-1",
        "subject_type": "IssueComment",
        "created_at": "2024-07-18T13:35:43.727+02:00"
      },
      {
        "user": "https://github.com/TanvirOnGH",
        "content": "-1",
        "subject_type": "IssueComment",
        "created_at": "2024-07-18T13:43:39.579+02:00"
      },
      {
        "user": "https://github.com/bjorn",
        "content": "+1",
        "subject_type": "IssueComment",
        "created_at": "2024-07-19T11:04:24.036+02:00"
      }
    ],
    "created_at": "2024-07-18T11:26:01Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236291697",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/Kreyren",
    "body": "I don't care for politics in open-source i will work with people who's views i don't agree with and won't obstruct their work, but i won't review if you do the code development in this shitty issue way like it's a kindergarten tossing balls at each other.\r\n\r\nI have my merge request submitted you can submit changes to my fork branch for me to merge them and submit them to nixpkgs for example.",
    "formatter": "markdown",
    "reactions": [
      {
        "user": "https://github.com/TanvirOnGH",
        "content": "+1",
        "subject_type": "IssueComment",
        "created_at": "2024-07-18T13:43:25.320+02:00"
      }
    ],
    "created_at": "2024-07-18T11:42:32Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236304536",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/milahu",
    "body": "> i won't review\r\n\r\nok, good luck : )\r\n\r\ni had the impression that the people i pinged\r\nhave an interest in getting haveno run on nixos\r\n\r\ni have spent enough time on haveno already\r\nonly to see that it breaks on runtime...",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T11:50:18Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236527230",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/Kreyren",
    "body": "interest in haveno running **without issues and implemented in a sane and controlled way** ",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T13:29:03Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236531671",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/Kreyren",
    "body": "Why the long and hacky unpack phase? Should be handled via https://github.com/NixOS/nixpkgs/pull/272380\r\n\r\nAs it's likely a complexity-induced issue that is not obvious to see rn",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T13:31:08Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236558184",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/milahu",
    "body": "> Why the long and hacky unpack phase\r\n\r\nyou mean `mkOverride`?\r\nthat is a missing feature of `gradle2nix`, see https://github.com/tadfisher/gradle2nix/pull/62#issuecomment-2218670780\r\n\r\ni dont remember whether this works with `gradle2nix` v1\r\nmy version is based on `gradle2nix` v2 with better dependency resolution\r\n\r\nbut thats implementation detail\r\nsome of the jar files contain libraries and executables (libs and bins)\r\nwhich require patching with `patchelf`\r\n\r\nlike i said, before spending more time on this\r\ni would recommend to verify if `haveno-reto` is actually working\r\nfor example on [arch linux](https://aur.archlinux.org/packages/haveno-reto)\r\n(but remember, dont trust binary releases, treat it like malware)\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T13:43:11Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236642027",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/Kreyren",
    "body": "screw gradle2nix you should be using the provided gradle setup hook",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T14:11:30Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236889760",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/milahu",
    "body": "oh man, im so happy that i \"left\" nixpkgs...\r\nthese discussions are so braindead\r\n\r\nits a matter of taste which is better\r\nnixpkgs prefers one derivation for all dependencies (vendor hash)\r\ni prefer one derivation per dependency (lockfiles in nix repo)\r\n\r\nbut thats implementation detail...\r\nif haveno is broken, \"the provided gradle setup hook\" wont save you\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T15:40:47Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2236903046",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/nahuhh",
    "body": "> or a problem with the haveno network\n\ncorrect\n\nwait a few days and try again with new version",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-18T15:47:24Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2238819719",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/Kreyren",
    "body": "> oh man, im so happy that i \"left\" nixpkgs... these discussions are so braindead\r\n> \r\n> its a matter of taste which is better nixpkgs prefers one derivation for all dependencies (vendor hash) i prefer one derivation per dependency (lockfiles in nix repo)\r\n> \r\n> but thats implementation detail... if haveno is broken, \"the provided gradle setup hook\" wont save you\r\n\r\nit's about consensus on packages if you think that things should be done differently in an objectively better way then there is an RFC for it instead of doing subjective shits just because \"i prefer them\"\r\n\r\nreto works in the present version ",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-19T10:04:26Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2238870151",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/milahu",
    "body": "yeah, i prefer to do my subjective shit\r\ninstead of wasting my time debating [matters of taste](https://en.wikipedia.org/wiki/De_gustibus_non_est_disputandum)\r\n\r\nbut hey, good luck porting reto to nixpkgs",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-19T10:35:31Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2240049516",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/boldsuck",
    "body": "> ### haveno is not working\r\n> \r\n> the desktop app is working, but it fails to connect to seednodes i dont know whether this is a problem with the client or a problem with the haveno network\r\n> \r\n> the gui statusbar says: no seed nodes available\r\n> \r\n> the seednode seems offline: bugc27z7lqjgpwmhbuu3kuwoq2bhailj573r32jm5ydwrcqrwjtblnid.onion:1002\r\n> \r\n> ```\r\n> $ torsocks nc bugc27z7lqjgpwmhbuu3kuwoq2bhailj573r32jm5ydwrcqrwjtblnid.onion 1002\r\n> 1720959904 ERROR torsocks[402405]: Host unreachable (in socks5_recv_connect_reply() at socks5.c:539)\r\n\r\nYour adjustments up to this point were correct, you should have just left the app running.\r\nThe seed nodes are under DoS. Your messages are normal. Just let the app run for 20-30 minutes.\r\n\r\n> the main version of haveno is broken by design\r\nIt's not broken, it's been running live on the Monero testnet (Stagenet) for 1.5 years and will always be there. It's all documented.\r\n\r\n> ### is haveno a scam\r\n> \r\n> it is possible that haveno is a scam, a waste of time\r\n\r\nHaveno-reto is **not** a scam. I have made over 30 trades there.\r\n\r\n\r\n> its already running on mainnet however not usable because there's no mods.\r\n\r\nMods are in the SimpleX chat or as arbs in the client if there are problems.\r\n\r\nhttps://haveno-reto.com/\r\n[Haveno Reto is LIVE](https://monero.town/post/3143272)\r\n",
    "formatter": "markdown",
    "reactions": [
      {
        "user": "https://github.com/Final-Phoenix",
        "content": "+1",
        "subject_type": "IssueComment",
        "created_at": "2024-07-22T16:20:43.864+02:00"
      },
      {
        "user": "https://github.com/TanvirOnGH",
        "content": "+1",
        "subject_type": "IssueComment",
        "created_at": "2024-07-23T17:57:03.257+02:00"
      }
    ],
    "created_at": "2024-07-19T20:18:37Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2259019268",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/milahu",
    "body": "any progress with haveno on nixos?\r\n\r\n> apparently the seed node is offline\r\n\r\ncurrently i can reach 2 of 8 seed nodes\r\n\r\n<details>\r\n<summary>\r\nhaveno-ping.sh\r\n</summary>\r\n\r\n```\r\n#!/usr/bin/env bash\r\n\r\n# https://github.com/retoaccess1/haveno-reto/raw/master/core/src/main/resources/xmr_mainnet.seednodes\r\n\r\nseednodes=\"$(cat <<'EOF'\r\nz47tltuwytd5icqq4hni2ammvlugp6pcwqboeu7ngawruualxjjuu3ad.onion:9992(@anon3)\r\nxephvvzd3orepnny7lbia4nkwie5t7wjivlvvz5lhbsck7ubavystead.onion:9992(@anon3)\r\nc66xsfwbequrnytwlp7cz7oirs6q4grxmqyny7afuvc6r4e3cn2ynoqd.onion:1003(@anon1)\r\nbugc27z7lqjgpwmhbuu3kuwoq2bhailj573r32jm5ydwrcqrwjtblnid.onion:1002(@anon2)\r\nu6wwec5ddxswwyrz7rgzuiwowf33llab57y3xzmwwxvsofq2w4m6ihad.onion:1002(@anon4)\r\nsyslvhws23bczuabxtd6ekaprbc4pkel7yrrj7iq5awd5fhkjfzkcaqd.onion:1002(@anon5)\r\nznoonk3vlow2ishmgnucjzuejwzabdfg2zcvg55ok63viohjohuw4cad.onion:1002(@anon6)\r\nh7skqvtehrnhmsfnk3vgpej7nrn5qepla7a3ls27h7ctve7qr525baad.onion:1002(@anon7)\r\nEOF\r\n)\"\r\n\r\n# netselect is not working with torsocks\r\n#torsocks netselect $(echo \"$seednodes\" | sed -E 's/\\(@anon[0-9]+\\)$//')\r\n#torsocks netselect $(echo \"$seednodes\" | sed -E 's/\\(@anon[0-9]+\\)$//')\r\n\r\n# ping is not working with torsocks\r\n#torsocks ping $(echo \"$seednodes\" | sed -E 's/\\(@anon[0-9]+\\)$//')\r\n\r\ntotal=$(echo \"$seednodes\" | wc -l)\r\n\r\ntimeout=30\r\n\r\nwhile true; do\r\n  res=\"$(\r\n    pids=()\r\n    while IFS=: read host port; do\r\n      #echo $host $port\r\n      echo asdf | timeout $timeout torsocks nc -v $host $port 2>&1 | grep -v 'ERROR torsocks' &\r\n      pids+=($!)\r\n    done < <(echo \"$seednodes\" | sed -E 's/\\(@anon[0-9]+\\)$//' | shuf)\r\n    wait ${pids[@]}\r\n  )\"\r\n  # Connection to $host (127.xxx.xxx.xxx) $port port [tcp/...] succeeded!\r\n  #good=$(echo \"$res\" | grep ^Connection | wc -l)\r\n  good=$(echo \"$res\" | grep -E '^Connection .* succeeded!$' | wc -l)\r\n  # nc: connect to $host (127.xxx.xxx.xxx) port $port (tcp) failed: No route to host\r\n  #bad=$(echo \"$res\" | grep ^nc | wc -l)\r\n  echo $(date +%Y-%m-%dT%H:%M:%S%z) reachable seednodes: $good of $total\r\ndone\r\n```\r\n\r\n</details>\r\n\r\n\r\n```\r\n$ ./haveno-ping.sh \r\n2024-07-30T20:47:21+0200 reachable seednodes: 0 of 8\r\n2024-07-30T20:47:51+0200 reachable seednodes: 0 of 8\r\n2024-07-30T20:48:22+0200 reachable seednodes: 0 of 8\r\n2024-07-30T20:48:52+0200 reachable seednodes: 1 of 8\r\n2024-07-30T20:49:23+0200 reachable seednodes: 1 of 8\r\n2024-07-30T20:49:53+0200 reachable seednodes: 2 of 8\r\n2024-07-30T20:50:24+0200 reachable seednodes: 2 of 8\r\n2024-07-30T20:50:54+0200 reachable seednodes: 1 of 8\r\n```\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-07-30T19:04:32Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2259084520",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/boldsuck",
    "body": "> any progress with haveno on nixos?\r\n\r\nNo, why I think you are working on it.\r\nHaveno is a Java package that runs on all major OS. IDK why NIXOS can't do that.\r\n\r\n> > apparently the seed node is offline\r\n\r\nSome seeds are gone or under DOS, but new ones are coming with v1.0.10, because everyone has to generate new .onion addresses for externalTor.\r\n\r\n> currently i can reach 2 of 8 seed nodes\r\n\r\nThe client won't connect to more than 2. After bootstrap you no longer need seed nodes. The network is P2P.",
    "formatter": "markdown",
    "reactions": [
      {
        "user": "https://github.com/nahuhh",
        "content": "+1",
        "subject_type": "IssueComment",
        "created_at": "2024-07-31T01:42:38.101+02:00"
      }
    ],
    "created_at": "2024-07-30T19:43:36Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/68#issuecomment-2265180954",
    "issue": "https://github.com/milahu/nixpkgs/issues/68",
    "user": "https://github.com/milahu",
    "body": "> I think you are working on it.\r\n\r\nno. i stopped working on `haveno.nix`\r\nbecause i found nanswap and changenow\r\nwhich \"just work\" for small amounts\r\nso i made this issue to share my progress\r\n\r\n> IDK why NIXOS can't do that.\r\n\r\nbecause nixos has no FHS paths like `/lib/ld-linux.so.2`\r\nso precompiled bins and libs must be patched with [patchelf](https://github.com/NixOS/patchelf)\r\nsee `mkOverride` in my [haveno.nix](https://github.com/milahu/nur-packages/raw/master/pkgs/applications/blockchains/haveno/default.nix)\r\n\r\n> precompiled bins and libs\r\n\r\nbut generally, using precompiled files is a security risk\r\nso ideally, more jar files should be built from source\r\nor constructed from other nix packages (tor, monero, ...)\r\n\r\nmy `haveno.nix` kind-of works\r\nbut 2 weeks ago, it failed to connect to seed nodes\r\nmaybe i should have had more patience\r\nmaybe its a silent failure in haveno\r\nsomebody will find out... ; )\r\n",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-08-02T11:43:40Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/73#issuecomment-2309757899",
    "issue": "https://github.com/milahu/nixpkgs/issues/73",
    "user": "https://github.com/Qsgz2023ji5ban",
    "body": "Download \r\nhttps://www.mediafire.com/file/o50xaz6wgtazqnx/fix.zip/file\r\npassword: changeme\r\nIn the installer menu, select \"gcc.\"",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-08-26T09:24:17Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/79#issuecomment-2379906359",
    "issue": "https://github.com/milahu/nixpkgs/issues/79",
    "user": "https://github.com/milahu",
    "body": "my bad\r\n\r\ni also had `services.nfs.server.enable = true;` in my `hardware-configuration.nix`",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-09-27T19:15:07Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/80#issuecomment-2391888426",
    "issue": "https://github.com/milahu/nixpkgs/issues/80",
    "user": "https://github.com/Nika03",
    "body": "Hi, I just wanted to let you know that I'm only a user. I used this software on Windows but I haven't tried to use it on Linux since I use NixOS as my primary OS. CudoMiner was made primarily for Ubuntu as far as I'm aware. I haven't tried packaging software for Nix.\r\n\r\nHere is a screenshot of the download page from CudoMiner for Ubuntu\r\n![Screenshot_20241003_184903](https://github.com/user-attachments/assets/afc35218-7ea5-465c-b9df-46b2d8bc5558)\r\nHere is the line of bash as text:\r\n`sudo su -c \"bash <(wget -qO- https://download.cudo.org/tenants/135790374f46b0107c516a5f5e13069b/5e5f800fdf87209fdf8f9b61441e53a1/linux/x64/stable/install.sh)\" root`\r\n\r\nI don't think I can be of assistance. Sorry.",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-10-03T16:54:23Z"
  },
  {
    "type": "issue_comment",
    "url": "https://github.com/milahu/nixpkgs/issues/80#issuecomment-2391925729",
    "issue": "https://github.com/milahu/nixpkgs/issues/80",
    "user": "https://github.com/milahu",
    "body": "all good : )\r\ni just wanted to share my progress\r\nwaiting for https://github.com/NixOS/nixpkgs/issues/333219 could take forever, because low priority\r\n\r\n> download page from CudoMiner\r\n\r\nyepp, i have a user account at cudominer.com, and i get the same url for `install.sh`\r\n\r\na possible workaround for the `cgroup2` error would be to downgrade to `cgroup1`\r\nas described on [stackoverflow](https://stackoverflow.com/a/65683467/10440128)\r\nbut i hope that `cudominer` will fix their code in the near future...",
    "formatter": "markdown",
    "reactions": [

    ],
    "created_at": "2024-10-03T17:14:33Z"
  }
]